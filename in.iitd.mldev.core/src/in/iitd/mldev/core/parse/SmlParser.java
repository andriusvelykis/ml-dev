
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Sep 24 23:16:48 IST 2005
//----------------------------------------------------

package in.iitd.mldev.core.parse;

import in.iitd.mldev.core.parse.ast.*;
import java.util.List;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
  * @version Sat Sep 24 23:16:48 IST 2005
  */
public class SmlParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SmlParser() {super();}

  /** Constructor which sets the default scanner. */
  public SmlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\002\003\003\000\002\002\004\000\002\057" +
    "\003\000\002\057\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\004\003\000\002\005\003\000" +
    "\002\006\003\000\002\007\003\000\002\065\002\000\002" +
    "\065\005\000\002\011\004\000\002\012\004\000\002\013" +
    "\004\000\002\014\006\000\002\061\003\000\002\061\004" +
    "\000\002\062\003\000\002\062\004\000\002\063\002\000" +
    "\002\063\003\000\002\063\005\000\002\064\003\000\002" +
    "\064\005\000\002\056\002\000\002\056\004\000\002\055" +
    "\002\000\002\055\003\000\002\016\003\000\002\016\004" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\004\000\002" +
    "\016\005\000\002\016\004\000\002\016\004\000\002\016" +
    "\005\000\002\016\005\000\002\016\007\000\002\016\005" +
    "\000\002\016\004\000\002\016\005\000\002\016\004\000" +
    "\002\016\007\000\002\016\007\000\002\017\003\000\002" +
    "\017\003\000\002\066\003\000\002\066\005\000\002\035" +
    "\005\000\002\067\005\000\002\067\005\000\002\070\003" +
    "\000\002\070\005\000\002\071\003\000\002\071\004\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\003\000\002\015\004\000\002\015" +
    "\006\000\002\015\006\000\002\015\010\000\002\015\004" +
    "\000\002\015\003\000\002\020\003\000\002\072\005\000" +
    "\002\072\005\000\002\073\002\000\002\073\007\000\002" +
    "\073\004\000\002\073\004\000\002\073\004\000\002\021" +
    "\004\000\002\021\005\000\002\021\005\000\002\021\006" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\006\000\002\021\007\000\002\021\011\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\023" +
    "\005\000\002\023\006\000\002\023\005\000\002\024\007" +
    "\000\002\024\010\000\002\024\005\000\002\025\003\000" +
    "\002\025\004\000\002\025\005\000\002\032\006\000\002" +
    "\032\005\000\002\026\006\000\002\026\005\000\002\027" +
    "\006\000\002\027\007\000\002\027\007\000\002\027\010" +
    "\000\002\027\005\000\002\030\004\000\002\030\006\000" +
    "\002\030\005\000\002\031\004\000\002\031\006\000\002" +
    "\031\006\000\002\031\005\000\002\042\003\000\002\042" +
    "\004\000\002\042\003\000\002\042\004\000\002\042\003" +
    "\000\002\034\003\000\002\034\004\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\004\000\002\034\005\000\002\034" +
    "\004\000\002\034\005\000\002\034\004\000\002\034\005" +
    "\000\002\034\004\000\002\034\007\000\002\034\005\000" +
    "\002\034\005\000\002\074\003\000\002\074\005\000\002" +
    "\074\003\000\002\036\005\000\002\036\004\000\002\036" +
    "\006\000\002\077\005\000\002\077\005\000\002\075\003" +
    "\000\002\075\005\000\002\076\003\000\002\076\004\000" +
    "\002\033\003\000\002\033\005\000\002\033\005\000\002" +
    "\033\003\000\002\040\003\000\002\040\005\000\002\040" +
    "\003\000\002\040\003\000\002\041\003\000\002\041\005" +
    "\000\002\041\004\000\002\041\010\000\002\041\004\000" +
    "\002\041\003\000\002\041\005\000\002\010\003\000\002" +
    "\101\005\000\002\101\005\000\002\100\003\000\002\100" +
    "\005\000\002\037\005\000\002\102\003\000\002\102\005" +
    "\000\002\043\005\000\002\043\003\000\002\043\004\000" +
    "\002\043\007\000\002\043\005\000\002\043\005\000\002" +
    "\043\003\000\002\044\005\000\002\044\005\000\002\105" +
    "\003\000\002\105\004\000\002\103\002\000\002\103\004" +
    "\000\002\103\004\000\002\104\002\000\002\104\004\000" +
    "\002\104\004\000\002\047\003\000\002\047\004\000\002" +
    "\047\004\000\002\047\007\000\002\046\003\000\002\046" +
    "\003\000\002\050\005\000\002\050\007\000\002\050\007" +
    "\000\002\050\005\000\002\052\006\000\002\052\010\000" +
    "\002\052\010\000\002\052\005\000\002\045\005\000\002" +
    "\045\003\000\002\045\005\000\002\045\003\000\002\106" +
    "\007\000\002\106\005\000\002\106\005\000\002\051\005" +
    "\000\002\051\005\000\002\053\006\000\002\053\005\000" +
    "\002\107\002\000\002\107\004\000\002\107\004\000\002" +
    "\054\004\000\002\054\004\000\002\054\004\000\002\054" +
    "\006\000\002\054\004\000\002\054\004\000\002\054\004" +
    "\000\002\054\004\000\002\054\004\000\002\054\004\000" +
    "\002\054\004\000\002\054\005\000\002\110\005\000\002" +
    "\110\007\000\002\110\005\000\002\111\006\000\002\111" +
    "\005\000\002\112\004\000\002\112\006\000\002\112\005" +
    "\000\002\113\006\000\002\113\005\000\002\114\003\000" +
    "\002\114\005\000\002\114\005\000\002\115\003\000\002" +
    "\115\004\000\002\115\005\000\002\116\005\000\002\116" +
    "\005\000\002\121\005\000\002\121\003\000\002\117\002" +
    "\000\002\117\006\000\002\120\002\000\002\120\003\000" +
    "\002\120\004\000\002\120\004\000\002\022\003\000\002" +
    "\022\004\000\002\022\004\000\002\022\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01fd\000\114\002\uff03\003\033\004\023\006\006\007" +
    "\036\010\030\011\010\012\uff03\016\032\017\uff03\024\uff03" +
    "\025\007\026\uff03\027\uff03\030\uff03\032\017\035\uff03\036" +
    "\uff03\040\034\041\uff03\042\uff03\044\011\045\uff03\047\026" +
    "\053\uff03\055\uff03\057\uff03\060\uff03\062\012\065\021\067" +
    "\020\070\013\072\022\100\uff03\104\031\107\024\110\005" +
    "\001\002\000\166\002\ufff8\003\ufff8\004\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\036\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045" +
    "\ufff8\046\ufff8\051\ufff8\053\ufff8\055\ufff8\056\ufff8\057\ufff8" +
    "\060\ufff8\061\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067" +
    "\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\075\ufff8\076\ufff8" +
    "\077\ufff8\100\ufff8\102\ufff8\103\ufff8\104\ufff8\105\ufff8\107" +
    "\ufff8\110\ufff8\001\002\000\166\002\ufffc\003\ufffc\004\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\033\ufffc\034" +
    "\ufffc\035\ufffc\036\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\046\ufffc\051\ufffc\053\ufffc\055\ufffc\056" +
    "\ufffc\057\ufffc\060\ufffc\061\ufffc\063\ufffc\064\ufffc\065\ufffc" +
    "\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\075" +
    "\ufffc\076\ufffc\077\ufffc\100\ufffc\102\ufffc\103\ufffc\104\ufffc" +
    "\105\ufffc\107\ufffc\110\ufffc\001\002\000\142\002\uffe0\003" +
    "\uffe0\004\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\024" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\033\uffe0\035\uffe0" +
    "\036\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\053\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0" +
    "\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073" +
    "\uffe0\075\uffe0\076\uffe0\100\uffe0\103\uffe0\104\uffe0\107\uffe0" +
    "\110\uffe0\001\002\000\032\003\225\004\217\006\206\010" +
    "\223\011\207\044\210\065\215\067\214\070\211\072\216" +
    "\102\221\110\142\001\002\000\142\002\uffdd\003\uffdd\004" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\024\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\035\uffdd\036\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\053\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\065\uffdd" +
    "\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd\075" +
    "\uffdd\076\uffdd\100\uffdd\103\uffdd\104\uffdd\107\uffdd\110\uffdd" +
    "\001\002\000\010\004\102\104\031\110\005\001\002\000" +
    "\052\003\033\004\023\006\006\007\036\010\030\011\010" +
    "\016\032\025\007\032\017\040\034\044\011\047\026\062" +
    "\012\065\021\067\020\070\013\072\022\104\031\107\024" +
    "\110\005\001\002\000\054\003\033\004\023\006\006\007" +
    "\036\010\030\011\010\016\032\025\007\032\017\040\034" +
    "\044\011\047\026\062\012\065\021\067\020\070\013\071" +
    "\u01f9\072\022\104\031\107\024\110\005\001\002\000\044" +
    "\002\001\012\056\017\061\024\053\026\047\027\u0150\030" +
    "\u014a\035\051\036\044\041\u0149\042\057\045\052\053\u014b" +
    "\055\u014f\057\054\060\060\100\u014c\001\002\000\142\002" +
    "\uffe1\003\uffe1\004\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\033\uffe1" +
    "\035\uffe1\036\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\053\uffe1\055\uffe1\056\uffe1\057\uffe1" +
    "\060\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1\072" +
    "\uffe1\073\uffe1\075\uffe1\076\uffe1\100\uffe1\103\uffe1\104\uffe1" +
    "\107\uffe1\110\uffe1\001\002\000\054\002\uff02\012\uff02\014" +
    "\237\017\uff02\024\uff02\026\uff02\027\uff02\030\uff02\031\240" +
    "\035\uff02\036\uff02\041\uff02\042\uff02\045\uff02\046\236\053" +
    "\uff02\055\uff02\057\uff02\060\uff02\076\241\100\uff02\001\002" +
    "\000\052\003\033\004\023\006\006\007\036\010\030\011" +
    "\010\016\032\025\007\032\017\040\034\044\011\047\026" +
    "\062\012\065\021\067\020\070\013\072\022\104\031\107" +
    "\024\110\005\001\002\000\054\003\033\004\023\006\006" +
    "\007\036\010\030\011\010\016\032\025\007\032\017\040" +
    "\034\044\011\047\026\062\012\065\021\067\020\070\013" +
    "\071\u0141\072\022\104\031\107\024\110\005\001\002\000" +
    "\054\003\033\004\023\006\006\007\036\010\030\011\010" +
    "\016\032\025\007\032\017\040\034\044\011\047\026\062" +
    "\012\065\021\066\u0135\067\020\070\013\072\022\104\031" +
    "\107\024\110\005\001\002\000\012\004\144\006\140\073" +
    "\u012f\110\142\001\002\000\144\002\ufffd\003\ufffd\004\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\024\ufffd\026\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\033\ufffd\035\ufffd\036\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\053\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\065\ufffd\066" +
    "\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\277" +
    "\075\ufffd\076\ufffd\100\ufffd\103\ufffd\104\ufffd\107\ufffd\110" +
    "\ufffd\001\002\000\010\004\144\006\140\110\142\001\002" +
    "\000\004\002\u012a\001\002\000\052\003\033\004\023\006" +
    "\006\007\036\010\030\011\010\016\032\025\007\032\017" +
    "\040\034\044\011\047\026\062\012\065\021\067\020\070" +
    "\013\072\022\104\031\107\024\110\005\001\002\000\142" +
    "\002\uffc6\003\uffc6\004\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\024\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\033" +
    "\uffc6\035\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\053\uffc6\055\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6" +
    "\072\uffc6\073\uffc6\075\uffc6\076\uffc6\100\uffc6\103\uffc6\104" +
    "\uffc6\107\uffc6\110\uffc6\001\002\000\142\002\uffde\003\uffde" +
    "\004\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\017\uffde\020\uffde\021\uffde\022\uffde\024\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\033\uffde\035\uffde\036" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\046\uffde\053\uffde\055\uffde\056\uffde\057\uffde\060\uffde\065" +
    "\uffde\066\uffde\067\uffde\070\uffde\071\uffde\072\uffde\073\uffde" +
    "\075\uffde\076\uffde\100\uffde\103\uffde\104\uffde\107\uffde\110" +
    "\uffde\001\002\000\166\002\ufffb\003\ufffb\004\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\026\ufffb\027\ufffb\030\ufffb\031\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\045\ufffb\046\ufffb\051\ufffb\053\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\061\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb" +
    "\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\075\ufffb\076" +
    "\ufffb\077\ufffb\100\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb" +
    "\107\ufffb\110\ufffb\001\002\000\052\003\033\004\023\006" +
    "\006\007\036\010\030\011\010\016\032\025\007\032\017" +
    "\040\034\044\011\047\026\062\012\065\021\067\020\070" +
    "\013\072\022\104\031\107\024\110\005\001\002\000\106" +
    "\002\uffba\003\uffba\012\uffba\013\uffba\014\uffba\017\uffba\020" +
    "\uffba\021\uffba\022\uffba\024\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\033\uffba\035\uffba\036\uffba\041\uffba\042\uffba\043" +
    "\uffba\045\uffba\046\uffba\053\uffba\055\uffba\056\uffba\057\uffba" +
    "\060\uffba\066\uffba\071\uffba\073\uffba\075\uffba\076\uffba\100" +
    "\uffba\103\uffba\001\002\000\036\003\uffb6\012\uffb6\017\uffb6" +
    "\024\uffb6\026\uffb6\033\uffb6\035\uffb6\036\uffb6\041\041\042" +
    "\uffb6\045\uffb6\057\uffb6\060\uffb6\100\uffb6\001\002\000\142" +
    "\002\uffe3\003\uffe3\004\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\024\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\033" +
    "\uffe3\035\uffe3\036\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\053\uffe3\055\uffe3\056\uffe3\057" +
    "\uffe3\060\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3" +
    "\072\uffe3\073\uffe3\075\uffe3\076\uffe3\100\uffe3\103\uffe3\104" +
    "\uffe3\107\uffe3\110\uffe3\001\002\000\142\002\uffdf\003\uffdf" +
    "\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\024\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\033\uffdf\035\uffdf\036" +
    "\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\053\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\065" +
    "\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf" +
    "\075\uffdf\076\uffdf\100\uffdf\103\uffdf\104\uffdf\107\uffdf\110" +
    "\uffdf\001\002\000\142\002\uffc0\003\uffc0\004\023\006\006" +
    "\007\036\010\030\011\010\012\uffc0\013\uffc0\014\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\033\uffc0\035\uffc0\036\uffc0\040\034\041" +
    "\uffc0\042\uffc0\043\uffc0\044\011\045\uffc0\046\uffc0\053\uffc0" +
    "\055\uffc0\056\uffc0\057\uffc0\060\uffc0\065\021\066\uffc0\067" +
    "\020\070\013\071\uffc0\072\022\073\uffc0\075\uffc0\076\uffc0" +
    "\100\uffc0\103\uffc0\104\031\107\024\110\005\001\002\000" +
    "\142\002\uffc5\003\uffc5\004\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\017\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\024\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\033\uffc5\035\uffc5\036\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\053\uffc5\055\uffc5\056\uffc5" +
    "\057\uffc5\060\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071" +
    "\uffc5\072\uffc5\073\uffc5\075\uffc5\076\uffc5\100\uffc5\103\uffc5" +
    "\104\uffc5\107\uffc5\110\uffc5\001\002\000\036\003\uffb6\012" +
    "\uffb6\017\uffb6\024\uffb6\026\uffb6\033\uffb6\035\uffb6\036\uffb6" +
    "\041\041\042\uffb6\045\uffb6\057\uffb6\060\uffb6\100\uffb6\001" +
    "\002\000\034\003\055\012\056\017\061\024\053\026\047" +
    "\033\046\035\051\036\044\042\057\045\052\057\054\060" +
    "\060\100\045\001\002\000\010\004\102\104\031\110\005" +
    "\001\002\000\012\004\uff89\006\u011e\104\uff89\110\uff89\001" +
    "\002\000\036\003\uffb2\012\uffb2\017\uffb2\022\uffb2\024\uffb2" +
    "\026\uffb2\033\uffb2\035\uffb2\036\uffb2\042\uffb2\045\uffb2\057" +
    "\uffb2\060\uffb2\100\uffb2\001\002\000\052\003\033\004\023" +
    "\006\006\007\036\010\030\011\010\016\032\025\007\032" +
    "\017\040\034\044\011\047\026\062\012\065\021\067\020" +
    "\070\013\072\022\104\031\107\024\110\005\001\002\000" +
    "\032\004\217\006\206\010\223\011\207\037\u010a\044\210" +
    "\065\215\067\214\070\211\072\216\102\221\110\142\001" +
    "\002\000\036\003\uffb4\012\uffb4\017\uffb4\022\uffb4\024\uffb4" +
    "\026\uffb4\033\uffb4\035\uffb4\036\uffb4\042\uffb4\045\uffb4\057" +
    "\uffb4\060\uffb4\100\uffb4\001\002\000\012\004\uff8b\006\u0109" +
    "\104\uff8b\110\uff8b\001\002\000\006\004\ufff6\110\ufff6\001" +
    "\002\000\012\004\uffe5\044\074\104\uffe5\110\uffe5\001\002" +
    "\000\010\004\uffec\005\063\065\066\001\002\000\036\003" +
    "\uffb3\012\uffb3\017\uffb3\022\uffb3\024\uffb3\026\uffb3\033\uffb3" +
    "\035\uffb3\036\uffb3\042\uffb3\045\uffb3\057\uffb3\060\uffb3\100" +
    "\uffb3\001\002\000\012\004\uffec\005\063\037\067\065\066" +
    "\001\002\000\010\004\uff87\104\uff87\110\uff87\001\002\000" +
    "\040\003\225\004\217\005\063\006\206\010\223\011\207" +
    "\037\204\044\210\050\220\065\215\067\214\070\211\072" +
    "\216\102\221\110\142\001\002\000\012\004\uffec\005\063" +
    "\037\067\065\066\001\002\000\004\004\071\001\002\000" +
    "\164\002\ufff7\003\ufff7\004\ufff7\006\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\015\ufff7\017\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\026\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\051\ufff7" +
    "\053\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\063" +
    "\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7" +
    "\072\ufff7\073\ufff7\075\ufff7\076\ufff7\077\ufff7\100\ufff7\102" +
    "\ufff7\103\ufff7\104\ufff7\105\ufff7\106\ufff7\110\ufff7\001\002" +
    "\000\010\004\uffeb\104\uffeb\110\uffeb\001\002\000\060\002" +
    "\uffab\003\uffab\012\uffab\013\165\017\uffab\022\uffab\024\uffab" +
    "\026\uffab\027\uffab\030\uffab\033\uffab\035\uffab\036\uffab\041" +
    "\uffab\042\uffab\045\uffab\053\uffab\055\uffab\057\uffab\060\uffab" +
    "\064\166\066\uffab\100\uffab\001\002\000\004\005\063\001" +
    "\002\000\010\004\uffec\005\063\065\066\001\002\000\004" +
    "\004\071\001\002\000\050\013\ufffa\017\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\027\ufffa\034\ufffa\035\ufffa\036\ufffa\042\ufffa" +
    "\043\ufffa\051\ufffa\055\ufffa\057\ufffa\060\ufffa\066\ufffa\076" +
    "\ufffa\100\ufffa\104\ufffa\001\002\000\004\104\073\001\002" +
    "\000\014\004\uffe5\017\075\044\074\104\uffe5\110\uffe5\001" +
    "\002\000\010\004\uffe4\104\uffe4\110\uffe4\001\002\000\004" +
    "\004\ufff6\001\002\000\010\004\102\104\031\110\005\001" +
    "\002\000\072\002\uff96\003\uff96\012\uff96\013\uff96\017\uff96" +
    "\022\uff96\023\uff96\024\uff96\026\uff96\027\uff96\030\uff96\033" +
    "\uff96\034\uff96\035\uff96\036\uff96\041\uff96\042\uff96\045\uff96" +
    "\051\uff96\053\uff96\055\uff96\057\uff96\060\uff96\063\uff96\064" +
    "\uff96\066\uff96\100\uff96\103\100\001\002\000\012\004\uffe5" +
    "\044\074\104\uffe5\110\uffe5\001\002\000\072\002\uff90\003" +
    "\uff90\012\uff90\013\uff90\017\uff90\022\uff90\023\uff90\024\uff90" +
    "\026\uff90\027\uff90\030\uff90\033\uff90\034\uff90\035\uff90\036" +
    "\uff90\041\uff90\042\uff90\045\uff90\051\uff90\053\uff90\055\uff90" +
    "\057\uff90\060\uff90\063\uff90\064\uff90\066\uff90\100\uff90\103" +
    "\100\001\002\000\166\002\ufffd\003\ufffd\004\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\051\ufffd\053\ufffd\055\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\061\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd" +
    "\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\075\ufffd\076" +
    "\ufffd\077\ufffd\100\ufffd\102\ufffd\103\ufffd\104\ufffd\105\ufffd" +
    "\107\ufffd\110\ufffd\001\002\000\074\002\uff92\003\uff92\012" +
    "\uff92\013\uff92\017\uff92\022\uff92\023\uff92\024\uff92\026\uff92" +
    "\027\uff92\030\uff92\033\uff92\034\uff92\035\uff92\036\uff92\041" +
    "\uff92\042\uff92\043\104\045\uff92\051\uff92\053\uff92\055\uff92" +
    "\057\uff92\060\uff92\063\uff92\064\uff92\066\uff92\100\uff92\103" +
    "\uff92\001\002\000\014\003\115\004\ufff6\005\063\065\116" +
    "\072\107\001\002\000\136\002\uff65\003\uff65\012\uff65\013" +
    "\uff65\014\uff65\015\uff65\017\uff65\020\uff65\021\uff65\022\uff65" +
    "\023\uff65\024\uff65\026\uff65\027\uff65\030\uff65\031\uff65\033" +
    "\uff65\034\uff65\035\uff65\036\uff65\041\uff65\042\uff65\043\uff65" +
    "\045\uff65\046\uff65\051\uff65\053\uff65\055\uff65\056\uff65\057" +
    "\uff65\060\uff65\061\uff65\063\uff65\064\uff65\066\uff65\071\uff65" +
    "\073\uff65\075\uff65\076\uff65\077\uff65\100\uff65\103\uff65\104" +
    "\uff65\105\uff65\106\uff65\110\155\001\002\000\140\002\uff5a" +
    "\003\uff5a\004\uff5a\012\uff5a\013\uff5a\014\uff5a\015\uff5a\017" +
    "\uff5a\020\uff5a\021\uff5a\022\uff5a\023\uff5a\024\uff5a\026\uff5a" +
    "\027\uff5a\030\uff5a\031\uff5a\033\uff5a\034\uff5a\035\uff5a\036" +
    "\uff5a\041\uff5a\042\uff5a\043\uff5a\045\uff5a\046\uff5a\051\uff5a" +
    "\053\uff5a\055\uff5a\056\uff5a\057\uff5a\060\uff5a\061\uff5a\063" +
    "\uff5a\064\uff5a\066\uff5a\071\uff5a\073\uff5a\075\uff5a\076\uff5a" +
    "\077\uff5a\100\uff5a\103\uff5a\104\uff5a\105\uff5a\106\uff5a\110" +
    "\uff5a\001\002\000\012\004\144\006\140\073\146\110\142" +
    "\001\002\000\140\002\uff61\003\uff61\004\uff61\012\uff61\013" +
    "\uff61\014\uff61\015\uff61\017\uff61\020\uff61\021\uff61\022\uff61" +
    "\023\uff61\024\uff61\026\uff61\027\uff61\030\uff61\031\uff61\033" +
    "\uff61\034\uff61\035\uff61\036\uff61\041\uff61\042\uff61\043\uff61" +
    "\045\uff61\046\uff61\051\uff61\053\uff61\055\uff61\056\uff61\057" +
    "\uff61\060\uff61\061\uff61\063\uff61\064\uff61\066\uff61\071\uff61" +
    "\073\uff61\075\uff61\076\uff61\077\uff61\100\uff61\103\uff61\104" +
    "\uff61\105\uff61\106\uff61\110\uff61\001\002\000\140\002\uff63" +
    "\003\uff63\004\ufff6\012\uff63\013\uff63\014\uff63\015\uff63\017" +
    "\uff63\020\uff63\021\uff63\022\uff63\023\uff63\024\uff63\026\uff63" +
    "\027\uff63\030\uff63\031\uff63\033\uff63\034\uff63\035\uff63\036" +
    "\uff63\041\uff63\042\uff63\043\uff63\045\uff63\046\uff63\051\uff63" +
    "\053\uff63\055\uff63\056\uff63\057\uff63\060\uff63\061\uff63\063" +
    "\uff63\064\uff63\066\uff63\071\uff63\073\uff63\075\uff63\076\uff63" +
    "\077\uff63\100\uff63\103\uff63\104\uff63\105\uff63\106\uff63\110" +
    "\135\001\002\000\140\002\uff5c\003\uff5c\004\uff5c\012\uff5c" +
    "\013\uff5c\014\uff5c\015\uff5c\017\uff5c\020\uff5c\021\uff5c\022" +
    "\uff5c\023\uff5c\024\uff5c\026\uff5c\027\uff5c\030\uff5c\031\uff5c" +
    "\033\uff5c\034\uff5c\035\uff5c\036\uff5c\041\uff5c\042\uff5c\043" +
    "\uff5c\045\uff5c\046\uff5c\051\uff5c\053\uff5c\055\uff5c\056\uff5c" +
    "\057\uff5c\060\uff5c\061\uff5c\063\uff5c\064\uff5c\066\uff5c\071" +
    "\uff5c\073\uff5c\075\uff5c\076\uff5c\077\uff5c\100\uff5c\103\uff5c" +
    "\104\uff5c\105\uff5c\106\uff5c\110\uff5c\001\002\000\004\004" +
    "\132\001\002\000\074\002\uff91\003\uff91\012\uff91\013\uff91" +
    "\017\uff91\022\uff91\023\uff91\024\uff91\026\uff91\027\uff91\030" +
    "\uff91\033\uff91\034\uff91\035\uff91\036\uff91\041\uff91\042\uff91" +
    "\045\uff91\051\uff91\053\uff91\055\uff91\057\uff91\060\uff91\063" +
    "\uff91\064\uff91\066\uff91\100\uff91\103\uff91\106\122\001\002" +
    "\000\134\002\uff62\003\uff62\012\uff62\013\uff62\014\uff62\015" +
    "\uff62\017\uff62\020\uff62\021\uff62\022\uff62\023\uff62\024\uff62" +
    "\026\uff62\027\uff62\030\uff62\031\uff62\033\uff62\034\uff62\035" +
    "\uff62\036\uff62\041\uff62\042\uff62\043\uff62\045\uff62\046\uff62" +
    "\051\uff62\053\uff62\055\uff62\056\uff62\057\uff62\060\uff62\061" +
    "\uff62\063\uff62\064\uff62\066\uff62\071\uff62\073\uff62\075\uff62" +
    "\076\uff62\077\uff62\100\uff62\103\uff62\104\uff62\105\uff62\106" +
    "\uff62\001\002\000\014\003\115\004\ufff6\005\063\065\116" +
    "\072\107\001\002\000\010\066\121\075\120\106\122\001" +
    "\002\000\014\003\115\004\ufff6\005\063\065\116\072\107" +
    "\001\002\000\140\002\uff5b\003\uff5b\004\uff5b\012\uff5b\013" +
    "\uff5b\014\uff5b\015\uff5b\017\uff5b\020\uff5b\021\uff5b\022\uff5b" +
    "\023\uff5b\024\uff5b\026\uff5b\027\uff5b\030\uff5b\031\uff5b\033" +
    "\uff5b\034\uff5b\035\uff5b\036\uff5b\041\uff5b\042\uff5b\043\uff5b" +
    "\045\uff5b\046\uff5b\051\uff5b\053\uff5b\055\uff5b\056\uff5b\057" +
    "\uff5b\060\uff5b\061\uff5b\063\uff5b\064\uff5b\066\uff5b\071\uff5b" +
    "\073\uff5b\075\uff5b\076\uff5b\077\uff5b\100\uff5b\103\uff5b\104" +
    "\uff5b\105\uff5b\106\uff5b\110\uff5b\001\002\000\014\003\115" +
    "\004\ufff6\005\063\065\116\072\107\001\002\000\134\002" +
    "\uff64\003\uff64\012\uff64\013\uff64\014\uff64\015\uff64\017\uff64" +
    "\020\uff64\021\uff64\022\uff64\023\uff64\024\uff64\026\uff64\027" +
    "\uff64\030\uff64\031\uff64\033\uff64\034\uff64\035\uff64\036\uff64" +
    "\041\uff64\042\uff64\043\uff64\045\uff64\046\uff64\051\uff64\053" +
    "\uff64\055\uff64\056\uff64\057\uff64\060\uff64\061\uff64\063\uff64" +
    "\064\uff64\066\uff64\071\uff64\073\uff64\075\uff64\076\uff64\077" +
    "\uff64\100\uff64\103\uff64\104\uff64\105\uff64\106\122\001\002" +
    "\000\006\066\127\075\126\001\002\000\010\066\uff54\075" +
    "\uff54\106\122\001\002\000\014\003\115\004\ufff6\005\063" +
    "\065\116\072\107\001\002\000\004\004\ufff6\001\002\000" +
    "\140\002\uff5e\003\uff5e\004\uff5e\012\uff5e\013\uff5e\014\uff5e" +
    "\015\uff5e\017\uff5e\020\uff5e\021\uff5e\022\uff5e\023\uff5e\024" +
    "\uff5e\026\uff5e\027\uff5e\030\uff5e\031\uff5e\033\uff5e\034\uff5e" +
    "\035\uff5e\036\uff5e\041\uff5e\042\uff5e\043\uff5e\045\uff5e\046" +
    "\uff5e\051\uff5e\053\uff5e\055\uff5e\056\uff5e\057\uff5e\060\uff5e" +
    "\061\uff5e\063\uff5e\064\uff5e\066\uff5e\071\uff5e\073\uff5e\075" +
    "\uff5e\076\uff5e\077\uff5e\100\uff5e\103\uff5e\104\uff5e\105\uff5e" +
    "\106\uff5e\110\uff5e\001\002\000\010\066\uff53\075\uff53\106" +
    "\122\001\002\000\142\002\ufff4\003\ufff4\004\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\033\ufff4\034\ufff4\035\ufff4\036\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\045\ufff4\046\ufff4\051\ufff4\053\ufff4\055\ufff4\056\ufff4" +
    "\057\ufff4\060\ufff4\061\ufff4\063\ufff4\064\ufff4\066\ufff4\071" +
    "\ufff4\073\ufff4\074\133\075\ufff4\076\ufff4\077\ufff4\100\ufff4" +
    "\103\ufff4\104\ufff4\105\ufff4\106\ufff4\110\ufff4\001\002\000" +
    "\010\004\ufff5\104\ufff5\110\ufff5\001\002\000\140\002\uff5d" +
    "\003\uff5d\004\uff5d\012\uff5d\013\uff5d\014\uff5d\015\uff5d\017" +
    "\uff5d\020\uff5d\021\uff5d\022\uff5d\023\uff5d\024\uff5d\026\uff5d" +
    "\027\uff5d\030\uff5d\031\uff5d\033\uff5d\034\uff5d\035\uff5d\036" +
    "\uff5d\041\uff5d\042\uff5d\043\uff5d\045\uff5d\046\uff5d\051\uff5d" +
    "\053\uff5d\055\uff5d\056\uff5d\057\uff5d\060\uff5d\061\uff5d\063" +
    "\uff5d\064\uff5d\066\uff5d\071\uff5d\073\uff5d\075\uff5d\076\uff5d" +
    "\077\uff5d\100\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d\110" +
    "\uff5d\001\002\000\012\004\ufff6\005\063\065\116\072\107" +
    "\001\002\000\140\002\uff59\003\uff59\004\ufff6\012\uff59\013" +
    "\uff59\014\uff59\015\uff59\017\uff59\020\uff59\021\uff59\022\uff59" +
    "\023\uff59\024\uff59\026\uff59\027\uff59\030\uff59\031\uff59\033" +
    "\uff59\034\uff59\035\uff59\036\uff59\041\uff59\042\uff59\043\uff59" +
    "\045\uff59\046\uff59\051\uff59\053\uff59\055\uff59\056\uff59\057" +
    "\uff59\060\uff59\061\uff59\063\uff59\064\uff59\066\uff59\071\uff59" +
    "\073\uff59\075\uff59\076\uff59\077\uff59\100\uff59\103\uff59\104" +
    "\uff59\105\uff59\106\uff59\110\uff59\001\002\000\006\073\uff57" +
    "\075\uff57\001\002\000\142\002\uffce\003\uffce\004\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\024\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\033\uffce\035\uffce\036\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\053" +
    "\uffce\055\uffce\056\uffce\057\uffce\060\uffce\065\uffce\066\uffce" +
    "\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce\075\uffce\076" +
    "\uffce\100\uffce\103\uffce\104\uffce\107\uffce\110\uffce\001\002" +
    "\000\006\073\153\075\152\001\002\000\150\002\ufffe\003" +
    "\ufffe\004\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\017\ufffe\020\ufffe\021\ufffe\022" +
    "\ufffe\024\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\033\ufffe" +
    "\035\ufffe\036\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\053\ufffe\055\ufffe\056\ufffe\057\ufffe" +
    "\060\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072" +
    "\ufffe\073\ufffe\075\ufffe\076\ufffe\100\ufffe\102\ufffe\103\ufffe" +
    "\104\ufffe\105\ufffe\107\ufffe\110\ufffe\001\002\000\142\002" +
    "\uffcf\003\uffcf\004\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\033\uffcf" +
    "\035\uffcf\036\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\053\uffcf\055\uffcf\056\uffcf\057\uffcf" +
    "\060\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072" +
    "\uffcf\073\uffcf\075\uffcf\076\uffcf\100\uffcf\103\uffcf\104\uffcf" +
    "\107\uffcf\110\uffcf\001\002\000\142\002\uffff\003\uffff\004" +
    "\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff" +
    "\014\uffff\017\uffff\020\uffff\021\uffff\022\uffff\024\uffff\026" +
    "\uffff\027\uffff\030\uffff\031\uffff\033\uffff\035\uffff\036\uffff" +
    "\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046" +
    "\uffff\053\uffff\055\uffff\056\uffff\057\uffff\060\uffff\065\uffff" +
    "\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff\073\uffff\075" +
    "\uffff\076\uffff\100\uffff\103\uffff\104\uffff\107\uffff\110\uffff" +
    "\001\002\000\004\076\150\001\002\000\140\002\uff5f\003" +
    "\uff5f\004\uff5f\012\uff5f\013\uff5f\014\uff5f\015\uff5f\017\uff5f" +
    "\020\uff5f\021\uff5f\022\uff5f\023\uff5f\024\uff5f\026\uff5f\027" +
    "\uff5f\030\uff5f\031\uff5f\033\uff5f\034\uff5f\035\uff5f\036\uff5f" +
    "\041\uff5f\042\uff5f\043\uff5f\045\uff5f\046\uff5f\051\uff5f\053" +
    "\uff5f\055\uff5f\056\uff5f\057\uff5f\060\uff5f\061\uff5f\063\uff5f" +
    "\064\uff5f\066\uff5f\071\uff5f\073\uff5f\075\uff5f\076\uff5f\077" +
    "\uff5f\100\uff5f\103\uff5f\104\uff5f\105\uff5f\106\uff5f\110\uff5f" +
    "\001\002\000\150\002\ufff9\003\ufff9\004\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\024\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\031\ufff9\033\ufff9\035\ufff9\036\ufff9\040\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\053" +
    "\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\065\ufff9\066\ufff9" +
    "\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\075\ufff9\076" +
    "\ufff9\100\ufff9\102\ufff9\103\ufff9\104\ufff9\105\ufff9\107\ufff9" +
    "\110\ufff9\001\002\000\014\003\115\004\ufff6\005\063\065" +
    "\116\072\107\001\002\000\010\073\uff55\075\uff55\106\122" +
    "\001\002\000\010\004\144\006\140\110\142\001\002\000" +
    "\140\002\uff60\003\uff60\004\uff60\012\uff60\013\uff60\014\uff60" +
    "\015\uff60\017\uff60\020\uff60\021\uff60\022\uff60\023\uff60\024" +
    "\uff60\026\uff60\027\uff60\030\uff60\031\uff60\033\uff60\034\uff60" +
    "\035\uff60\036\uff60\041\uff60\042\uff60\043\uff60\045\uff60\046" +
    "\uff60\051\uff60\053\uff60\055\uff60\056\uff60\057\uff60\060\uff60" +
    "\061\uff60\063\uff60\064\uff60\066\uff60\071\uff60\073\uff60\075" +
    "\uff60\076\uff60\077\uff60\100\uff60\103\uff60\104\uff60\105\uff60" +
    "\106\uff60\110\uff60\001\002\000\006\073\uff56\075\uff56\001" +
    "\002\000\012\004\ufff6\005\063\065\116\072\107\001\002" +
    "\000\140\002\uff58\003\uff58\004\ufff6\012\uff58\013\uff58\014" +
    "\uff58\015\uff58\017\uff58\020\uff58\021\uff58\022\uff58\023\uff58" +
    "\024\uff58\026\uff58\027\uff58\030\uff58\031\uff58\033\uff58\034" +
    "\uff58\035\uff58\036\uff58\041\uff58\042\uff58\043\uff58\045\uff58" +
    "\046\uff58\051\uff58\053\uff58\055\uff58\056\uff58\057\uff58\060" +
    "\uff58\061\uff58\063\uff58\064\uff58\066\uff58\071\uff58\073\uff58" +
    "\075\uff58\076\uff58\077\uff58\100\uff58\103\uff58\104\uff58\105" +
    "\uff58\106\uff58\110\uff58\001\002\000\070\002\uff94\003\uff94" +
    "\012\uff94\013\uff94\017\uff94\022\uff94\023\uff94\024\uff94\026" +
    "\uff94\027\uff94\030\uff94\033\uff94\034\uff94\035\uff94\036\uff94" +
    "\041\uff94\042\uff94\045\uff94\051\uff94\053\uff94\055\uff94\057" +
    "\uff94\060\uff94\063\uff94\064\uff94\066\uff94\100\uff94\001\002" +
    "\000\006\066\163\075\162\001\002\000\040\003\uffe9\004" +
    "\uffe9\006\uffe9\010\uffe9\011\uffe9\037\uffe9\044\uffe9\065\uffe9" +
    "\066\uffe9\067\uffe9\070\uffe9\072\uffe9\075\uffe9\102\uffe9\110" +
    "\uffe9\001\002\000\004\005\063\001\002\000\010\004\uffea" +
    "\104\uffea\110\uffea\001\002\000\040\003\uffe8\004\uffe8\006" +
    "\uffe8\010\uffe8\011\uffe8\037\uffe8\044\uffe8\065\uffe8\066\uffe8" +
    "\067\uffe8\070\uffe8\072\uffe8\075\uffe8\102\uffe8\110\uffe8\001" +
    "\002\000\012\004\uffec\005\063\037\067\065\066\001\002" +
    "\000\010\004\uffec\005\063\065\066\001\002\000\056\002" +
    "\uffaa\003\uffaa\012\uffaa\013\174\017\uffaa\022\uffaa\024\uffaa" +
    "\026\uffaa\027\uffaa\030\uffaa\033\uffaa\035\uffaa\036\uffaa\041" +
    "\uffaa\042\uffaa\045\uffaa\053\uffaa\055\uffaa\057\uffaa\060\uffaa" +
    "\066\uffaa\100\uffaa\001\002\000\004\004\071\001\002\000" +
    "\004\104\172\001\002\000\014\003\115\004\ufff6\005\063" +
    "\065\116\072\107\001\002\000\070\002\uff99\003\uff99\012" +
    "\uff99\013\uff99\017\uff99\022\uff99\023\uff99\024\uff99\026\uff99" +
    "\027\uff99\030\uff99\033\uff99\034\uff99\035\uff99\036\uff99\041" +
    "\uff99\042\uff99\045\uff99\051\uff99\053\uff99\055\uff99\057\uff99" +
    "\060\uff99\063\uff99\066\uff99\100\uff99\106\122\001\002\000" +
    "\010\004\uffec\005\063\065\066\001\002\000\066\002\uff98" +
    "\003\uff98\012\uff98\013\uff98\017\uff98\022\uff98\023\uff98\024" +
    "\uff98\026\uff98\027\uff98\030\uff98\033\uff98\034\uff98\035\uff98" +
    "\036\uff98\041\uff98\042\uff98\045\uff98\051\uff98\053\uff98\055" +
    "\uff98\057\uff98\060\uff98\063\uff98\066\uff98\100\uff98\001\002" +
    "\000\070\002\uff93\003\uff93\012\uff93\013\uff93\017\uff93\022" +
    "\uff93\023\uff93\024\uff93\026\uff93\027\uff93\030\uff93\033\uff93" +
    "\034\uff93\035\uff93\036\uff93\041\uff93\042\uff93\045\uff93\051" +
    "\uff93\053\uff93\055\uff93\057\uff93\060\uff93\063\uff93\064\uff93" +
    "\066\uff93\100\uff93\001\002\000\004\104\200\001\002\000" +
    "\014\004\uffe5\017\201\044\074\104\uffe5\110\uffe5\001\002" +
    "\000\004\004\ufff6\001\002\000\072\002\uff97\003\uff97\012" +
    "\uff97\013\uff97\017\uff97\022\uff97\023\uff97\024\uff97\026\uff97" +
    "\027\uff97\030\uff97\033\uff97\034\uff97\035\uff97\036\uff97\041" +
    "\uff97\042\uff97\045\uff97\051\uff97\053\uff97\055\uff97\057\uff97" +
    "\060\uff97\063\uff97\064\uff97\066\uff97\100\uff97\103\100\001" +
    "\002\000\070\002\uff95\003\uff95\012\uff95\013\uff95\017\uff95" +
    "\022\uff95\023\uff95\024\uff95\026\uff95\027\uff95\030\uff95\033" +
    "\uff95\034\uff95\035\uff95\036\uff95\041\uff95\042\uff95\045\uff95" +
    "\051\uff95\053\uff95\055\uff95\057\uff95\060\uff95\063\uff95\064" +
    "\uff95\066\uff95\100\uff95\001\002\000\032\003\225\004\217" +
    "\006\206\010\223\011\207\044\210\065\215\067\214\070" +
    "\211\072\216\102\221\110\142\001\002\000\036\003\225" +
    "\004\217\006\206\010\223\011\207\037\204\044\210\065" +
    "\215\067\214\070\211\072\216\075\162\102\221\110\142" +
    "\001\002\000\052\004\uff83\006\uff83\010\uff83\011\uff83\015" +
    "\uff83\044\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071\uff83" +
    "\072\uff83\073\uff83\075\uff83\076\uff83\102\uff83\103\uff83\104" +
    "\uff83\105\uff83\110\uff83\001\002\000\052\004\uff81\006\uff81" +
    "\010\uff81\011\uff81\015\uff81\044\uff81\065\uff81\066\uff81\067" +
    "\uff81\070\uff81\071\uff81\072\uff81\073\uff81\075\uff81\076\uff81" +
    "\102\uff81\103\uff81\104\uff81\105\uff81\110\uff81\001\002\000" +
    "\010\004\102\104\031\110\005\001\002\000\034\003\225" +
    "\004\217\006\206\010\223\011\207\044\210\065\215\067" +
    "\214\070\211\071\347\072\216\102\221\110\142\001\002" +
    "\000\052\004\uff84\006\uff84\010\uff84\011\uff84\015\uff84\044" +
    "\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84" +
    "\073\uff84\075\uff84\076\uff84\102\uff84\103\uff84\104\uff84\105" +
    "\uff84\110\uff84\001\002\000\056\002\uffb1\003\uffb1\012\uffb1" +
    "\013\344\017\uffb1\022\uffb1\024\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\033\uffb1\035\uffb1\036\uffb1\041\uffb1\042\uffb1\045\uffb1" +
    "\053\uffb1\055\uffb1\057\uffb1\060\uffb1\066\uffb1\100\uffb1\001" +
    "\002\000\034\003\225\004\217\006\206\010\223\011\207" +
    "\044\210\065\215\067\214\070\211\071\342\072\216\102" +
    "\221\110\142\001\002\000\034\003\225\004\217\006\206" +
    "\010\223\011\207\044\210\065\215\066\322\067\214\070" +
    "\211\072\216\102\221\110\142\001\002\000\014\004\306" +
    "\006\140\073\311\101\305\110\142\001\002\000\054\004" +
    "\uffff\006\uffff\010\uffff\011\uffff\015\uffff\044\uffff\065\uffff" +
    "\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff\073\uffff\074" +
    "\277\075\uffff\076\uffff\102\uffff\103\uffff\104\uffff\105\uffff" +
    "\110\uffff\001\002\000\014\004\uffe5\005\063\037\260\044" +
    "\074\110\uffe5\001\002\000\052\004\uff80\006\uff80\010\uff80" +
    "\011\uff80\015\uff80\044\uff80\065\uff80\066\uff80\067\uff80\070" +
    "\uff80\071\uff80\072\uff80\073\uff80\075\uff80\076\uff80\102\uff80" +
    "\103\uff80\104\uff80\105\uff80\110\uff80\001\002\000\010\015" +
    "\231\076\233\104\232\001\002\000\052\004\uff82\006\uff82" +
    "\010\uff82\011\uff82\015\uff82\044\uff82\065\uff82\066\uff82\067" +
    "\uff82\070\uff82\071\uff82\072\uff82\073\uff82\075\uff82\076\uff82" +
    "\102\uff82\103\uff82\104\uff82\105\uff82\110\uff82\001\002\000" +
    "\052\004\uff6b\006\uff6b\010\uff6b\011\uff6b\015\uff6b\044\uff6b" +
    "\065\uff6b\066\uff6b\067\uff6b\070\uff6b\071\uff6b\072\uff6b\073" +
    "\uff6b\075\uff6b\076\uff6b\102\uff6b\103\uff6b\104\uff6b\105\uff6b" +
    "\110\uff6b\001\002\000\024\015\uff66\066\uff66\071\uff66\073" +
    "\uff66\075\uff66\076\uff66\103\uff66\104\uff66\105\uff66\001\002" +
    "\000\052\004\217\006\206\010\223\011\207\015\uff69\044" +
    "\210\065\215\066\uff69\067\214\070\211\071\uff69\072\216" +
    "\073\uff69\075\uff69\076\uff69\102\221\103\uff69\104\uff69\105" +
    "\uff69\110\142\001\002\000\052\004\uff86\006\uff86\010\uff86" +
    "\011\uff86\015\uff86\044\uff86\065\uff86\066\uff86\067\uff86\070" +
    "\uff86\071\uff86\072\uff86\073\uff86\075\uff86\076\uff86\102\uff86" +
    "\103\uff86\104\uff86\105\uff86\110\uff86\001\002\000\052\004" +
    "\uff6a\006\uff6a\010\uff6a\011\uff6a\015\uff6a\044\uff6a\065\uff6a" +
    "\066\uff6a\067\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a\075" +
    "\uff6a\076\uff6a\102\uff6a\103\uff6a\104\uff6a\105\uff6a\110\uff6a" +
    "\001\002\000\032\003\225\004\217\006\206\010\223\011" +
    "\207\044\210\065\215\067\214\070\211\072\216\102\221" +
    "\110\142\001\002\000\052\003\033\004\023\006\006\007" +
    "\036\010\030\011\010\016\032\025\007\032\017\040\034" +
    "\044\011\047\026\062\012\065\021\067\020\070\013\072" +
    "\022\104\031\107\024\110\005\001\002\000\014\003\115" +
    "\004\ufff6\005\063\065\116\072\107\001\002\000\026\015" +
    "\uff67\066\uff67\071\uff67\073\uff67\075\uff67\076\uff67\103\uff67" +
    "\104\uff67\105\uff67\106\122\001\002\000\066\002\uffa4\003" +
    "\uffa4\012\uffa4\013\uffa4\014\237\017\uffa4\022\uffa4\024\uffa4" +
    "\026\uffa4\027\uffa4\030\uffa4\031\240\033\uffa4\035\uffa4\036" +
    "\uffa4\041\uffa4\042\uffa4\045\uffa4\046\236\053\uffa4\055\uffa4" +
    "\057\uffa4\060\uffa4\066\uffa4\076\241\100\uffa4\001\002\000" +
    "\052\003\033\004\023\006\006\007\036\010\030\011\010" +
    "\016\032\025\007\032\017\040\034\044\011\047\026\062" +
    "\012\065\021\067\020\070\013\072\022\104\031\107\024" +
    "\110\005\001\002\000\052\003\033\004\023\006\006\007" +
    "\036\010\030\011\010\016\032\025\007\032\017\040\034" +
    "\044\011\047\026\062\012\065\021\067\020\070\013\072" +
    "\022\104\031\107\024\110\005\001\002\000\032\003\225" +
    "\004\217\006\206\010\223\011\207\044\210\065\215\067" +
    "\214\070\211\072\216\102\221\110\142\001\002\000\014" +
    "\003\115\004\ufff6\005\063\065\116\072\107\001\002\000" +
    "\110\002\uffc1\003\uffc1\012\uffc1\013\uffc1\014\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\024\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\033\uffc1\035\uffc1\036\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\045\uffc1\046\uffc1\053\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\066\uffc1\071\uffc1\073\uffc1\075\uffc1\076\uffc1" +
    "\100\uffc1\103\uffc1\106\122\001\002\000\106\002\uffc4\003" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\033" +
    "\uffc4\035\uffc4\036\uffc4\041\uffc4\042\uffc4\043\uffc4\045\uffc4" +
    "\046\uffc4\053\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\066" +
    "\uffc4\071\uffc4\073\uffc4\075\uffc4\076\uffc4\100\uffc4\103\uffc4" +
    "\001\002\000\106\002\uffb9\003\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\024\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\033\uffb9\035\uffb9\036\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\045\uffb9\046\uffb9\053\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\066\uffb9\071\uffb9\073\uffb9\075" +
    "\uffb9\076\uffb9\100\uffb9\103\250\001\002\000\010\015\231" +
    "\076\233\105\246\001\002\000\052\003\033\004\023\006" +
    "\006\007\036\010\030\011\010\016\032\025\007\032\017" +
    "\040\034\044\011\047\026\062\012\065\021\067\020\070" +
    "\013\072\022\104\031\107\024\110\005\001\002\000\106" +
    "\002\uffb8\003\uffb8\012\uffb8\013\uffb8\014\237\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\240\033\uffb8\035\uffb8\036\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\045\uffb8\046\236\053\uffb8\055\uffb8\056\uffb8\057\uffb8" +
    "\060\uffb8\066\uffb8\071\uffb8\073\uffb8\075\uffb8\076\241\100" +
    "\uffb8\103\uffb8\001\002\000\032\003\225\004\217\006\206" +
    "\010\223\011\207\044\210\065\215\067\214\070\211\072" +
    "\216\102\221\110\142\001\002\000\106\002\uffb7\003\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\024\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7" +
    "\035\uffb7\036\uffb7\041\uffb7\042\uffb7\043\uffb7\045\uffb7\046" +
    "\uffb7\053\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\066\uffb7" +
    "\071\uffb7\073\uffb7\075\uffb7\076\uffb7\100\uffb7\103\250\001" +
    "\002\000\106\002\uffc2\003\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\024\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\033\uffc2\035\uffc2\036\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\045\uffc2\046\uffc2\053\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\066\uffc2\071\uffc2\073\uffc2\075\uffc2" +
    "\076\241\100\uffc2\103\uffc2\001\002\000\106\002\uffc3\003" +
    "\uffc3\012\uffc3\013\uffc3\014\237\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\024\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\033" +
    "\uffc3\035\uffc3\036\uffc3\041\uffc3\042\uffc3\043\uffc3\045\uffc3" +
    "\046\uffc3\053\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\066" +
    "\uffc3\071\uffc3\073\uffc3\075\uffc3\076\241\100\uffc3\103\uffc3" +
    "\001\002\000\024\015\231\066\uff68\071\uff68\073\uff68\075" +
    "\uff68\076\233\103\uff68\104\uff68\105\uff68\001\002\000\006" +
    "\004\144\110\142\001\002\000\056\002\uffaf\003\uffaf\012" +
    "\uffaf\013\271\017\uffaf\022\uffaf\024\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\033\uffaf\035\uffaf\036\uffaf\041\uffaf\042\uffaf\045" +
    "\uffaf\053\uffaf\055\uffaf\057\uffaf\060\uffaf\066\uffaf\100\uffaf" +
    "\001\002\000\014\004\uffe5\037\260\044\074\075\162\110" +
    "\uffe5\001\002\000\010\004\uffe5\044\074\110\uffe5\001\002" +
    "\000\006\004\144\110\142\001\002\000\006\076\263\104" +
    "\uffe7\001\002\000\014\003\115\004\ufff6\005\063\065\116" +
    "\072\107\001\002\000\004\104\265\001\002\000\052\003" +
    "\033\004\023\006\006\007\036\010\030\011\010\016\032" +
    "\025\007\032\017\040\034\044\011\047\026\062\012\065" +
    "\021\067\020\070\013\072\022\104\031\107\024\110\005" +
    "\001\002\000\066\002\uffa0\003\uffa0\012\uffa0\013\uffa0\014" +
    "\237\017\uffa0\022\uffa0\024\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\031\240\033\uffa0\035\uffa0\036\uffa0\041\uffa0\042\uffa0\045" +
    "\uffa0\046\236\053\uffa0\055\uffa0\057\uffa0\060\uffa0\066\uffa0" +
    "\076\241\100\uffa0\001\002\000\014\015\uffe6\073\uffe6\075" +
    "\uffe6\104\uffe6\106\122\001\002\000\056\002\uffae\003\uffae" +
    "\012\uffae\013\271\017\uffae\022\uffae\024\uffae\026\uffae\027" +
    "\uffae\030\uffae\033\uffae\035\uffae\036\uffae\041\uffae\042\uffae" +
    "\045\uffae\053\uffae\055\uffae\057\uffae\060\uffae\066\uffae\100" +
    "\uffae\001\002\000\012\004\uffe5\037\260\044\074\110\uffe5" +
    "\001\002\000\056\002\uff9f\003\uff9f\012\uff9f\013\uff9f\017" +
    "\uff9f\022\uff9f\024\uff9f\026\uff9f\027\uff9f\030\uff9f\033\uff9f" +
    "\035\uff9f\036\uff9f\041\uff9f\042\uff9f\045\uff9f\053\uff9f\055" +
    "\uff9f\057\uff9f\060\uff9f\066\uff9f\100\uff9f\001\002\000\006" +
    "\076\263\104\uffe7\001\002\000\004\104\275\001\002\000" +
    "\052\003\033\004\023\006\006\007\036\010\030\011\010" +
    "\016\032\025\007\032\017\040\034\044\011\047\026\062" +
    "\012\065\021\067\020\070\013\072\022\104\031\107\024" +
    "\110\005\001\002\000\066\002\uffa1\003\uffa1\012\uffa1\013" +
    "\uffa1\014\237\017\uffa1\022\uffa1\024\uffa1\026\uffa1\027\uffa1" +
    "\030\uffa1\031\240\033\uffa1\035\uffa1\036\uffa1\041\uffa1\042" +
    "\uffa1\045\uffa1\046\236\053\uffa1\055\uffa1\057\uffa1\060\uffa1" +
    "\066\uffa1\076\241\100\uffa1\001\002\000\010\004\ufff6\104" +
    "\ufff6\110\ufff6\001\002\000\010\004\301\104\031\110\005" +
    "\001\002\000\164\002\ufffd\003\ufffd\004\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\036\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\051\ufffd\053\ufffd\055\ufffd\056\ufffd\057\ufffd" +
    "\060\ufffd\061\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\071" +
    "\ufffd\072\ufffd\073\ufffd\074\133\075\ufffd\076\ufffd\077\ufffd" +
    "\100\ufffd\102\ufffd\103\ufffd\104\ufffd\105\ufffd\107\ufffd\110" +
    "\ufffd\001\002\000\150\002\ufff1\003\ufff1\004\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\033\ufff1\035\ufff1\036\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1" +
    "\053\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\065\ufff1\066" +
    "\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\075\ufff1" +
    "\076\ufff1\100\ufff1\102\ufff1\103\ufff1\104\ufff1\105\ufff1\107" +
    "\ufff1\110\ufff1\001\002\000\004\073\321\001\002\000\012" +
    "\015\uffe7\073\uffe7\075\uffe7\076\263\001\002\000\004\073" +
    "\uff73\001\002\000\014\015\ufffa\073\ufffa\075\ufffa\076\ufffa" +
    "\104\uffff\001\002\000\004\104\314\001\002\000\006\073" +
    "\uff75\075\312\001\002\000\052\004\uff7b\006\uff7b\010\uff7b" +
    "\011\uff7b\015\uff7b\044\uff7b\065\uff7b\066\uff7b\067\uff7b\070" +
    "\uff7b\071\uff7b\072\uff7b\073\uff7b\075\uff7b\076\uff7b\102\uff7b" +
    "\103\uff7b\104\uff7b\105\uff7b\110\uff7b\001\002\000\012\004" +
    "\306\006\140\101\305\110\142\001\002\000\004\073\uff74" +
    "\001\002\000\032\003\225\004\217\006\206\010\223\011" +
    "\207\044\210\065\215\067\214\070\211\072\216\102\221" +
    "\110\142\001\002\000\012\015\231\073\uff72\075\uff72\076" +
    "\233\001\002\000\010\015\317\073\uff71\075\uff71\001\002" +
    "\000\032\003\225\004\217\006\206\010\223\011\207\044" +
    "\210\065\215\067\214\070\211\072\216\102\221\110\142" +
    "\001\002\000\012\015\231\073\uff70\075\uff70\076\233\001" +
    "\002\000\052\004\uff7a\006\uff7a\010\uff7a\011\uff7a\015\uff7a" +
    "\044\uff7a\065\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a\072" +
    "\uff7a\073\uff7a\075\uff7a\076\uff7a\102\uff7a\103\uff7a\104\uff7a" +
    "\105\uff7a\110\uff7a\001\002\000\052\004\uff79\006\uff79\010" +
    "\uff79\011\uff79\015\uff79\044\uff79\065\uff79\066\uff79\067\uff79" +
    "\070\uff79\071\uff79\072\uff79\073\uff79\075\uff79\076\uff79\102" +
    "\uff79\103\uff79\104\uff79\105\uff79\110\uff79\001\002\000\014" +
    "\015\231\066\331\075\330\076\233\103\332\001\002\000" +
    "\006\066\325\103\326\001\002\000\052\004\uff77\006\uff77" +
    "\010\uff77\011\uff77\015\uff77\044\uff77\065\uff77\066\uff77\067" +
    "\uff77\070\uff77\071\uff77\072\uff77\073\uff77\075\uff77\076\uff77" +
    "\102\uff77\103\uff77\104\uff77\105\uff77\110\uff77\001\002\000" +
    "\032\003\225\004\217\006\206\010\223\011\207\044\210" +
    "\065\215\067\214\070\211\072\216\102\221\110\142\001" +
    "\002\000\012\015\231\066\uff6e\076\233\103\uff6e\001\002" +
    "\000\032\003\225\004\217\006\206\010\223\011\207\044" +
    "\210\065\215\067\214\070\211\072\216\102\221\110\142" +
    "\001\002\000\052\004\uff76\006\uff76\010\uff76\011\uff76\015" +
    "\uff76\044\uff76\065\uff76\066\uff76\067\uff76\070\uff76\071\uff76" +
    "\072\uff76\073\uff76\075\uff76\076\uff76\102\uff76\103\uff76\104" +
    "\uff76\105\uff76\110\uff76\001\002\000\032\003\225\004\217" +
    "\006\206\010\223\011\207\044\210\065\215\067\214\070" +
    "\211\072\216\102\221\110\142\001\002\000\012\015\231" +
    "\066\uff6f\076\233\103\uff6f\001\002\000\006\066\337\075" +
    "\336\001\002\000\014\015\231\066\uff6d\071\uff6d\075\uff6d" +
    "\076\233\001\002\000\032\003\225\004\217\006\206\010" +
    "\223\011\207\044\210\065\215\067\214\070\211\072\216" +
    "\102\221\110\142\001\002\000\052\004\uff78\006\uff78\010" +
    "\uff78\011\uff78\015\uff78\044\uff78\065\uff78\066\uff78\067\uff78" +
    "\070\uff78\071\uff78\072\uff78\073\uff78\075\uff78\076\uff78\102" +
    "\uff78\103\uff78\104\uff78\105\uff78\110\uff78\001\002\000\014" +
    "\015\231\066\uff6c\071\uff6c\075\uff6c\076\233\001\002\000" +
    "\006\071\343\075\336\001\002\000\052\004\uff7f\006\uff7f" +
    "\010\uff7f\011\uff7f\015\uff7f\044\uff7f\065\uff7f\066\uff7f\067" +
    "\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\075\uff7f\076\uff7f" +
    "\102\uff7f\103\uff7f\104\uff7f\105\uff7f\110\uff7f\001\002\000" +
    "\052\004\uff7e\006\uff7e\010\uff7e\011\uff7e\015\uff7e\044\uff7e" +
    "\065\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e\073" +
    "\uff7e\075\uff7e\076\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e" +
    "\110\uff7e\001\002\000\034\003\225\004\217\006\206\010" +
    "\223\011\207\037\204\044\210\065\215\067\214\070\211" +
    "\072\216\102\221\110\142\001\002\000\056\002\uffa2\003" +
    "\uffa2\012\uffa2\013\uffa2\017\uffa2\022\uffa2\024\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\033\uffa2\035\uffa2\036\uffa2\041\uffa2\042" +
    "\uffa2\045\uffa2\053\uffa2\055\uffa2\057\uffa2\060\uffa2\066\uffa2" +
    "\100\uffa2\001\002\000\006\071\350\075\336\001\002\000" +
    "\052\004\uff7d\006\uff7d\010\uff7d\011\uff7d\015\uff7d\044\uff7d" +
    "\065\uff7d\066\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d\073" +
    "\uff7d\075\uff7d\076\uff7d\102\uff7d\103\uff7d\104\uff7d\105\uff7d" +
    "\110\uff7d\001\002\000\052\004\uff7c\006\uff7c\010\uff7c\011" +
    "\uff7c\015\uff7c\044\uff7c\065\uff7c\066\uff7c\067\uff7c\070\uff7c" +
    "\071\uff7c\072\uff7c\073\uff7c\075\uff7c\076\uff7c\102\uff7c\103" +
    "\uff7c\104\uff7c\105\uff7c\110\uff7c\001\002\000\052\004\uff85" +
    "\006\uff85\010\uff85\011\uff85\015\uff85\044\uff85\065\uff85\066" +
    "\uff85\067\uff85\070\uff85\071\uff85\072\uff85\073\uff85\075\uff85" +
    "\076\uff85\102\uff85\103\uff85\104\uff85\105\uff85\110\uff85\001" +
    "\002\000\056\002\uffb0\003\uffb0\012\uffb0\013\344\017\uffb0" +
    "\022\uffb0\024\uffb0\026\uffb0\027\uffb0\030\uffb0\033\uffb0\035" +
    "\uffb0\036\uffb0\041\uffb0\042\uffb0\045\uffb0\053\uffb0\055\uffb0" +
    "\057\uffb0\060\uffb0\066\uffb0\100\uffb0\001\002\000\010\015" +
    "\231\076\233\104\354\001\002\000\052\003\033\004\023" +
    "\006\006\007\036\010\030\011\010\016\032\025\007\032" +
    "\017\040\034\044\011\047\026\062\012\065\021\067\020" +
    "\070\013\072\022\104\031\107\024\110\005\001\002\000" +
    "\066\002\uffa3\003\uffa3\012\uffa3\013\uffa3\014\237\017\uffa3" +
    "\022\uffa3\024\uffa3\026\uffa3\027\uffa3\030\uffa3\031\240\033" +
    "\uffa3\035\uffa3\036\uffa3\041\uffa3\042\uffa3\045\uffa3\046\236" +
    "\053\uffa3\055\uffa3\057\uffa3\060\uffa3\066\uffa3\076\241\100" +
    "\uffa3\001\002\000\010\013\165\063\357\064\360\001\002" +
    "\000\036\003\uffb6\012\uffb6\017\uffb6\022\uffb6\024\uffb6\026" +
    "\uffb6\035\uffb6\036\uffb6\041\041\042\uffb6\045\uffb6\057\uffb6" +
    "\060\uffb6\100\uffb6\001\002\000\010\004\uffec\005\063\065" +
    "\066\001\002\000\006\013\174\063\362\001\002\000\036" +
    "\003\uffb6\012\uffb6\017\uffb6\022\uffb6\024\uffb6\026\uffb6\035" +
    "\uffb6\036\uffb6\041\041\042\uffb6\045\uffb6\057\uffb6\060\uffb6" +
    "\100\uffb6\001\002\000\034\003\055\012\056\017\061\022" +
    "\364\024\053\026\047\035\051\036\044\042\057\045\052" +
    "\057\054\060\060\100\045\001\002\000\054\002\uffa8\003" +
    "\uffa8\012\uffa8\017\uffa8\022\uffa8\024\uffa8\026\uffa8\027\uffa8" +
    "\030\uffa8\033\uffa8\035\uffa8\036\uffa8\041\uffa8\042\uffa8\045" +
    "\uffa8\053\uffa8\055\uffa8\057\uffa8\060\uffa8\066\uffa8\100\uffa8" +
    "\001\002\000\034\003\055\012\056\017\061\022\366\024" +
    "\053\026\047\035\051\036\044\042\057\045\052\057\054" +
    "\060\060\100\045\001\002\000\054\002\uffa9\003\uffa9\012" +
    "\uffa9\017\uffa9\022\uffa9\024\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\033\uffa9\035\uffa9\036\uffa9\041\uffa9\042\uffa9\045\uffa9\053" +
    "\uffa9\055\uffa9\057\uffa9\060\uffa9\066\uffa9\100\uffa9\001\002" +
    "\000\056\002\uffac\003\uffac\012\uffac\013\174\017\uffac\022" +
    "\uffac\024\uffac\026\uffac\027\uffac\030\uffac\033\uffac\035\uffac" +
    "\036\uffac\041\uffac\042\uffac\045\uffac\053\uffac\055\uffac\057" +
    "\uffac\060\uffac\066\uffac\100\uffac\001\002\000\056\002\uffa7" +
    "\003\uffa7\012\uffa7\013\u0101\017\uffa7\022\uffa7\024\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\033\uffa7\035\uffa7\036\uffa7\041\uffa7" +
    "\042\uffa7\045\uffa7\053\uffa7\055\uffa7\057\uffa7\060\uffa7\066" +
    "\uffa7\100\uffa7\001\002\000\010\004\102\104\031\110\005" +
    "\001\002\000\062\002\uff8f\003\uff8f\012\uff8f\013\uff8f\017" +
    "\uff8f\022\uff8f\024\uff8f\026\uff8f\027\uff8f\030\uff8f\033\uff8f" +
    "\035\uff8f\036\uff8f\041\uff8f\042\uff8f\043\374\045\uff8f\053" +
    "\uff8f\055\uff8f\057\uff8f\060\uff8f\066\uff8f\100\uff8f\104\373" +
    "\001\002\000\010\004\ufff6\104\ufff6\110\ufff6\001\002\000" +
    "\014\003\115\004\ufff6\005\063\065\116\072\107\001\002" +
    "\000\060\002\uff8e\003\uff8e\012\uff8e\013\uff8e\017\uff8e\022" +
    "\uff8e\024\uff8e\026\uff8e\027\uff8e\030\uff8e\033\uff8e\035\uff8e" +
    "\036\uff8e\041\uff8e\042\uff8e\045\uff8e\053\uff8e\055\uff8e\057" +
    "\uff8e\060\uff8e\066\uff8e\100\uff8e\106\122\001\002\000\056" +
    "\002\uff8d\003\uff8d\012\uff8d\013\uff8d\017\uff8d\022\uff8d\024" +
    "\uff8d\026\uff8d\027\uff8d\030\uff8d\033\uff8d\035\uff8d\036\uff8d" +
    "\041\uff8d\042\uff8d\045\uff8d\053\uff8d\055\uff8d\057\uff8d\060" +
    "\uff8d\066\uff8d\100\uff8d\001\002\000\010\004\301\104\031" +
    "\110\005\001\002\000\076\002\ufff2\003\ufff2\012\ufff2\013" +
    "\ufff2\017\ufff2\022\ufff2\023\ufff2\024\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\041\ufff2\042" +
    "\ufff2\045\ufff2\051\ufff2\053\ufff2\055\ufff2\057\ufff2\060\ufff2" +
    "\061\ufff2\065\ufff2\066\ufff2\076\ufff2\077\ufff2\100\ufff2\104" +
    "\ufff2\001\002\000\012\004\uffe5\044\074\104\uffe5\110\uffe5" +
    "\001\002\000\056\002\uff8c\003\uff8c\012\uff8c\013\uff8c\017" +
    "\uff8c\022\uff8c\024\uff8c\026\uff8c\027\uff8c\030\uff8c\033\uff8c" +
    "\035\uff8c\036\uff8c\041\uff8c\042\uff8c\045\uff8c\053\uff8c\055" +
    "\uff8c\057\uff8c\060\uff8c\066\uff8c\100\uff8c\001\002\000\060" +
    "\002\ufff0\003\ufff0\004\ufff0\012\ufff0\017\ufff0\022\ufff0\024" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\033\ufff0\035\ufff0\036\ufff0" +
    "\041\ufff0\042\ufff0\045\ufff0\053\ufff0\055\ufff0\057\ufff0\060" +
    "\ufff0\066\ufff0\100\ufff0\110\ufff0\001\002\000\006\004\u0107" +
    "\110\142\001\002\000\060\002\uffa6\003\uffa6\004\ufff6\012" +
    "\uffa6\017\uffa6\022\uffa6\024\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\033\uffa6\035\uffa6\036\uffa6\041\uffa6\042\uffa6\045\uffa6\053" +
    "\uffa6\055\uffa6\057\uffa6\060\uffa6\066\uffa6\100\uffa6\110\ufff6" +
    "\001\002\000\060\002\uffef\003\uffef\004\uffef\012\uffef\017" +
    "\uffef\022\uffef\024\uffef\026\uffef\027\uffef\030\uffef\033\uffef" +
    "\035\uffef\036\uffef\041\uffef\042\uffef\045\uffef\053\uffef\055" +
    "\uffef\057\uffef\060\uffef\066\uffef\100\uffef\110\uffef\001\002" +
    "\000\062\002\uffff\003\uffff\004\uffff\012\uffff\017\uffff\022" +
    "\uffff\024\uffff\026\uffff\027\uffff\030\uffff\033\uffff\035\uffff" +
    "\036\uffff\041\uffff\042\uffff\045\uffff\053\uffff\055\uffff\057" +
    "\uffff\060\uffff\066\uffff\074\133\100\uffff\110\uffff\001\002" +
    "\000\060\002\ufff3\003\ufff3\004\ufff3\012\ufff3\017\ufff3\022" +
    "\ufff3\024\ufff3\026\ufff3\027\ufff3\030\ufff3\033\ufff3\035\ufff3" +
    "\036\ufff3\041\ufff3\042\ufff3\045\ufff3\053\ufff3\055\ufff3\057" +
    "\ufff3\060\ufff3\066\ufff3\100\ufff3\110\ufff3\001\002\000\010" +
    "\004\uff8a\104\uff8a\110\uff8a\001\002\000\030\004\217\006" +
    "\206\010\223\011\207\044\210\065\215\067\214\070\211" +
    "\072\216\102\221\110\142\001\002\000\060\002\uff9e\003" +
    "\uff9e\012\uff9e\013\uff9e\017\uff9e\022\uff9e\024\uff9e\026\uff9e" +
    "\027\uff9e\030\uff9e\033\uff9e\035\uff9e\036\uff9e\041\uff9e\042" +
    "\uff9e\045\uff9e\053\uff9e\055\uff9e\057\uff9e\060\uff9e\066\uff9e" +
    "\100\uff9e\103\u0113\001\002\000\056\002\uffad\003\uffad\012" +
    "\uffad\013\u0111\017\uffad\022\uffad\024\uffad\026\uffad\027\uffad" +
    "\030\uffad\033\uffad\035\uffad\036\uffad\041\uffad\042\uffad\045" +
    "\uffad\053\uffad\055\uffad\057\uffad\060\uffad\066\uffad\100\uffad" +
    "\001\002\000\034\004\217\006\206\010\223\011\207\044" +
    "\210\065\215\067\214\070\211\072\216\076\263\102\221" +
    "\104\uffe7\110\142\001\002\000\004\104\u010f\001\002\000" +
    "\052\003\033\004\023\006\006\007\036\010\030\011\010" +
    "\016\032\025\007\032\017\040\034\044\011\047\026\062" +
    "\012\065\021\067\020\070\013\072\022\104\031\107\024" +
    "\110\005\001\002\000\070\002\uff9b\003\uff9b\012\uff9b\013" +
    "\uff9b\014\237\017\uff9b\022\uff9b\024\uff9b\026\uff9b\027\uff9b" +
    "\030\uff9b\031\240\033\uff9b\035\uff9b\036\uff9b\041\uff9b\042" +
    "\uff9b\045\uff9b\046\236\053\uff9b\055\uff9b\057\uff9b\060\uff9b" +
    "\066\uff9b\076\241\100\uff9b\103\uff9b\001\002\000\032\004" +
    "\217\006\206\010\223\011\207\037\u010a\044\210\065\215" +
    "\067\214\070\211\072\216\102\221\110\142\001\002\000" +
    "\056\002\uff9c\003\uff9c\012\uff9c\013\uff9c\017\uff9c\022\uff9c" +
    "\024\uff9c\026\uff9c\027\uff9c\030\uff9c\033\uff9c\035\uff9c\036" +
    "\uff9c\041\uff9c\042\uff9c\045\uff9c\053\uff9c\055\uff9c\057\uff9c" +
    "\060\uff9c\066\uff9c\100\uff9c\001\002\000\030\004\217\006" +
    "\206\010\223\011\207\044\210\065\215\067\214\070\211" +
    "\072\216\102\221\110\142\001\002\000\060\002\uff9a\003" +
    "\uff9a\012\uff9a\013\uff9a\017\uff9a\022\uff9a\024\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\033\uff9a\035\uff9a\036\uff9a\041\uff9a\042" +
    "\uff9a\045\uff9a\053\uff9a\055\uff9a\057\uff9a\060\uff9a\066\uff9a" +
    "\100\uff9a\103\u0113\001\002\000\060\002\uff9d\003\uff9d\012" +
    "\uff9d\013\uff9d\017\uff9d\022\uff9d\024\uff9d\026\uff9d\027\uff9d" +
    "\030\uff9d\033\uff9d\035\uff9d\036\uff9d\041\uff9d\042\uff9d\045" +
    "\uff9d\053\uff9d\055\uff9d\057\uff9d\060\uff9d\066\uff9d\100\uff9d" +
    "\103\u0113\001\002\000\016\014\237\022\u011c\031\240\046" +
    "\236\076\241\100\u011b\001\002\000\006\022\u0119\100\u0118" +
    "\001\002\000\052\003\033\004\023\006\006\007\036\010" +
    "\030\011\010\016\032\025\007\032\017\040\034\044\011" +
    "\047\026\062\012\065\021\067\020\070\013\072\022\104" +
    "\031\107\024\110\005\001\002\000\142\002\uffd0\003\uffd0" +
    "\004\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\024\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\033\uffd0\035\uffd0\036" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\053\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\065" +
    "\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0" +
    "\075\uffd0\076\uffd0\100\uffd0\103\uffd0\104\uffd0\107\uffd0\110" +
    "\uffd0\001\002\000\020\014\237\022\uffc9\031\240\046\236" +
    "\066\uffc9\076\241\100\uffc9\001\002\000\052\003\033\004" +
    "\023\006\006\007\036\010\030\011\010\016\032\025\007" +
    "\032\017\040\034\044\011\047\026\062\012\065\021\067" +
    "\020\070\013\072\022\104\031\107\024\110\005\001\002" +
    "\000\142\002\uffd1\003\uffd1\004\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\033\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\053\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1" +
    "\071\uffd1\072\uffd1\073\uffd1\075\uffd1\076\uffd1\100\uffd1\103" +
    "\uffd1\104\uffd1\107\uffd1\110\uffd1\001\002\000\020\014\237" +
    "\022\uffca\031\240\046\236\066\uffca\076\241\100\uffca\001" +
    "\002\000\010\004\uff88\104\uff88\110\uff88\001\002\000\070" +
    "\002\uffee\003\uffee\004\uffee\012\uffee\017\uffee\022\uffee\023" +
    "\uffee\024\uffee\026\uffee\027\uffee\030\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\041\uffee\042\uffee\045\uffee\051\uffee\053" +
    "\uffee\055\uffee\057\uffee\060\uffee\066\uffee\100\uffee\104\uffee" +
    "\110\uffee\001\002\000\062\002\uffa5\003\uffa5\004\102\012" +
    "\uffa5\017\uffa5\022\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5" +
    "\033\uffa5\035\uffa5\036\uffa5\041\uffa5\042\uffa5\045\uffa5\053" +
    "\uffa5\055\uffa5\057\uffa5\060\uffa5\066\uffa5\100\uffa5\104\031" +
    "\110\005\001\002\000\070\002\uffed\003\uffed\004\uffed\012" +
    "\uffed\017\uffed\022\uffed\023\uffed\024\uffed\026\uffed\027\uffed" +
    "\030\uffed\033\uffed\034\uffed\035\uffed\036\uffed\041\uffed\042" +
    "\uffed\045\uffed\051\uffed\053\uffed\055\uffed\057\uffed\060\uffed" +
    "\066\uffed\100\uffed\104\uffed\110\uffed\001\002\000\034\003" +
    "\055\012\056\017\061\024\053\026\047\033\u0123\035\051" +
    "\036\044\042\057\045\052\057\054\060\060\100\045\001" +
    "\002\000\036\003\uffb6\012\uffb6\017\uffb6\022\uffb6\024\uffb6" +
    "\026\uffb6\035\uffb6\036\uffb6\041\041\042\uffb6\045\uffb6\057" +
    "\uffb6\060\uffb6\100\uffb6\001\002\000\034\003\055\012\056" +
    "\017\061\022\u0125\024\053\026\047\035\051\036\044\042" +
    "\057\045\052\057\054\060\060\100\045\001\002\000\036" +
    "\003\uffb5\012\uffb5\017\uffb5\022\uffb5\024\uffb5\026\uffb5\033" +
    "\uffb5\035\uffb5\036\uffb5\042\uffb5\045\uffb5\057\uffb5\060\uffb5" +
    "\100\uffb5\001\002\000\014\014\237\031\240\043\u0127\046" +
    "\236\076\241\001\002\000\032\003\225\004\217\006\206" +
    "\010\223\011\207\044\210\065\215\067\214\070\211\072" +
    "\216\102\221\110\142\001\002\000\106\002\uffbe\003\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe" +
    "\035\uffbe\036\uffbe\041\uffbe\042\uffbe\043\uffbe\045\uffbe\046" +
    "\uffbe\053\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\066\uffbe" +
    "\071\uffbe\073\uffbe\075\uffbe\076\uffbe\100\uffbe\103\uffbe\001" +
    "\002\000\106\002\uffbb\003\uffbb\012\uffbb\013\uffbb\014\237" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\240\033\uffbb\035\uffbb\036\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\045\uffbb\046\236\053\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\066\uffbb\071\uffbb\073\uffbb\075\uffbb" +
    "\076\241\100\uffbb\103\uffbb\001\002\000\004\002\000\001" +
    "\002\000\142\002\uffdc\003\uffdc\004\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\033\uffdc\035\uffdc\036\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\053\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\065\uffdc\066\uffdc\067\uffdc\070" +
    "\uffdc\071\uffdc\072\uffdc\073\uffdc\075\uffdc\076\uffdc\100\uffdc" +
    "\103\uffdc\104\uffdc\107\uffdc\110\uffdc\001\002\000\006\073" +
    "\uffcd\075\uffcd\001\002\000\006\073\u0133\075\u0132\001\002" +
    "\000\004\104\u0130\001\002\000\142\002\uffda\003\uffda\004" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\017\uffda\020\uffda\021\uffda\022\uffda\024\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\033\uffda\035\uffda\036\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\053\uffda\055\uffda\056\uffda\057\uffda\060\uffda\065\uffda" +
    "\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda\075" +
    "\uffda\076\uffda\100\uffda\103\uffda\104\uffda\107\uffda\110\uffda" +
    "\001\002\000\052\003\033\004\023\006\006\007\036\010" +
    "\030\011\010\016\032\025\007\032\017\040\034\044\011" +
    "\047\026\062\012\065\021\067\020\070\013\072\022\104" +
    "\031\107\024\110\005\001\002\000\016\014\237\031\240" +
    "\046\236\073\uffcb\075\uffcb\076\241\001\002\000\010\004" +
    "\144\006\140\110\142\001\002\000\142\002\uffdb\003\uffdb" +
    "\004\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\024\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb\035\uffdb\036" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb" +
    "\046\uffdb\053\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\065" +
    "\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb" +
    "\075\uffdb\076\uffdb\100\uffdb\103\uffdb\104\uffdb\107\uffdb\110" +
    "\uffdb\001\002\000\006\073\uffcc\075\uffcc\001\002\000\142" +
    "\002\uffd9\003\uffd9\004\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033" +
    "\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\053\uffd9\055\uffd9\056\uffd9\057" +
    "\uffd9\060\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9" +
    "\072\uffd9\073\uffd9\075\uffd9\076\uffd9\100\uffd9\103\uffd9\104" +
    "\uffd9\107\uffd9\110\uffd9\001\002\000\020\014\237\031\240" +
    "\046\236\066\u013a\075\u0139\076\241\100\u011b\001\002\000" +
    "\006\066\u0138\100\u0118\001\002\000\142\002\uffd7\003\uffd7" +
    "\004\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\024\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\035\uffd7\036" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\053\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\065" +
    "\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7" +
    "\075\uffd7\076\uffd7\100\uffd7\103\uffd7\104\uffd7\107\uffd7\110" +
    "\uffd7\001\002\000\052\003\033\004\023\006\006\007\036" +
    "\010\030\011\010\016\032\025\007\032\017\040\034\044" +
    "\011\047\026\062\012\065\021\067\020\070\013\072\022" +
    "\104\031\107\024\110\005\001\002\000\142\002\uffd8\003" +
    "\uffd8\004\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\024" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\033\uffd8\035\uffd8" +
    "\036\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\053\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8\073" +
    "\uffd8\075\uffd8\076\uffd8\100\uffd8\103\uffd8\104\uffd8\107\uffd8" +
    "\110\uffd8\001\002\000\006\066\u013e\075\u013d\001\002\000" +
    "\020\014\237\031\240\046\236\066\uffc8\071\uffc8\075\uffc8" +
    "\076\241\001\002\000\052\003\033\004\023\006\006\007" +
    "\036\010\030\011\010\016\032\025\007\032\017\040\034" +
    "\044\011\047\026\062\012\065\021\067\020\070\013\072" +
    "\022\104\031\107\024\110\005\001\002\000\142\002\uffd6" +
    "\003\uffd6\004\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\024\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6\035" +
    "\uffd6\036\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\046\uffd6\053\uffd6\055\uffd6\056\uffd6\057\uffd6\060" +
    "\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6" +
    "\073\uffd6\075\uffd6\076\uffd6\100\uffd6\103\uffd6\104\uffd6\107" +
    "\uffd6\110\uffd6\001\002\000\020\014\237\031\240\046\236" +
    "\066\uffc7\071\uffc7\075\uffc7\076\241\001\002\000\006\071" +
    "\u0142\075\u013d\001\002\000\142\002\uffd4\003\uffd4\004\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\024\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\033\uffd4\035\uffd4\036\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\053\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\065\uffd4\066" +
    "\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\075\uffd4" +
    "\076\uffd4\100\uffd4\103\uffd4\104\uffd4\107\uffd4\110\uffd4\001" +
    "\002\000\142\002\uffd5\003\uffd5\004\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\033\uffd5\035\uffd5\036\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\053\uffd5\055\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\065\uffd5\066\uffd5\067\uffd5\070" +
    "\uffd5\071\uffd5\072\uffd5\073\uffd5\075\uffd5\076\uffd5\100\uffd5" +
    "\103\uffd5\104\uffd5\107\uffd5\110\uffd5\001\002\000\014\014" +
    "\237\031\240\046\236\056\u0144\076\241\001\002\000\052" +
    "\003\033\004\023\006\006\007\036\010\030\011\010\016" +
    "\032\025\007\032\017\040\034\044\011\047\026\062\012" +
    "\065\021\067\020\070\013\072\022\104\031\107\024\110" +
    "\005\001\002\000\014\014\237\021\u0146\031\240\046\236" +
    "\076\241\001\002\000\052\003\033\004\023\006\006\007" +
    "\036\010\030\011\010\016\032\025\007\032\017\040\034" +
    "\044\011\047\026\062\012\065\021\067\020\070\013\072" +
    "\022\104\031\107\024\110\005\001\002\000\106\002\uffbc" +
    "\003\uffbc\012\uffbc\013\uffbc\014\237\017\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\024\uffbc\026\uffbc\027\uffbc\030\uffbc\031\240" +
    "\033\uffbc\035\uffbc\036\uffbc\041\uffbc\042\uffbc\043\uffbc\045" +
    "\uffbc\046\236\053\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\066\uffbc\071\uffbc\073\uffbc\075\uffbc\076\241\100\uffbc\103" +
    "\uffbc\001\002\000\044\002\uff01\012\uff01\017\uff01\024\uff01" +
    "\026\uff01\027\uff01\030\uff01\035\uff01\036\uff01\041\uff01\042" +
    "\uff01\045\uff01\053\uff01\055\uff01\057\uff01\060\uff01\100\uff01" +
    "\001\002\000\042\003\uff47\012\uff47\017\uff47\024\uff47\026" +
    "\uff47\027\uff47\033\uff47\035\uff47\036\uff47\041\uff47\042\uff47" +
    "\045\uff47\055\uff47\057\uff47\060\uff47\100\uff47\001\002\000" +
    "\010\004\102\104\031\110\005\001\002\000\010\004\102" +
    "\104\031\110\005\001\002\000\114\002\uff00\003\033\004" +
    "\023\006\006\007\036\010\030\011\010\012\uff00\016\032" +
    "\017\uff00\024\uff00\025\007\026\uff00\027\uff00\030\uff00\032" +
    "\017\035\uff00\036\uff00\040\034\041\uff00\042\uff00\044\011" +
    "\045\uff00\047\026\053\uff00\055\uff00\057\uff00\060\uff00\062" +
    "\012\065\021\067\020\070\013\072\022\100\uff00\104\031" +
    "\107\024\110\005\001\002\000\044\002\ufeff\012\ufeff\017" +
    "\ufeff\024\ufeff\026\ufeff\027\ufeff\030\ufeff\035\ufeff\036\ufeff" +
    "\041\ufeff\042\ufeff\045\ufeff\053\ufeff\055\ufeff\057\ufeff\060" +
    "\ufeff\100\ufeff\001\002\000\054\002\uff41\003\uff41\012\uff41" +
    "\017\uff41\022\uff41\024\uff41\026\uff41\027\uff41\030\uff41\033" +
    "\uff41\035\uff41\036\uff41\041\uff41\042\uff41\045\uff41\053\uff41" +
    "\055\uff41\057\uff41\060\uff41\066\uff41\100\uff41\001\002\000" +
    "\010\004\102\104\031\110\005\001\002\000\010\004\102" +
    "\104\031\110\005\001\002\000\012\065\uff05\076\uff05\077" +
    "\uff05\104\uff05\001\002\000\056\002\uff3f\003\uff3f\012\uff3f" +
    "\013\u0153\017\uff3f\022\uff3f\024\uff3f\026\uff3f\027\uff3f\030" +
    "\uff3f\033\uff3f\035\uff3f\036\uff3f\041\uff3f\042\uff3f\045\uff3f" +
    "\053\uff3f\055\uff3f\057\uff3f\060\uff3f\066\uff3f\100\uff3f\001" +
    "\002\000\010\004\102\104\031\110\005\001\002\000\056" +
    "\002\uff34\003\uff34\012\uff34\013\uff34\017\uff34\022\uff34\024" +
    "\uff34\026\uff34\027\uff34\030\uff34\033\uff34\035\uff34\036\uff34" +
    "\041\uff34\042\uff34\045\uff34\053\uff34\055\uff34\057\uff34\060" +
    "\uff34\066\uff34\100\uff34\001\002\000\012\065\u0158\076\u0157" +
    "\077\u0159\104\u0156\001\002\000\016\003\u016d\004\ufff6\040" +
    "\u016c\054\u016e\104\ufff6\110\ufff6\001\002\000\014\003\u015b" +
    "\004\102\052\u015c\104\031\110\005\001\002\000\040\004" +
    "\071\017\u0193\023\u018d\024\u018c\027\u0189\034\u0191\035\051" +
    "\036\044\042\057\051\u0190\055\u018e\057\u018f\060\u0192\066" +
    "\uff28\100\u018a\001\002\000\014\003\u015b\004\102\052\u015c" +
    "\104\031\110\005\001\002\000\074\002\uff32\003\uff32\012" +
    "\uff32\013\uff32\017\uff32\022\uff32\023\uff32\024\uff32\026\uff32" +
    "\027\uff32\030\uff32\033\uff32\034\uff32\035\uff32\036\uff32\041" +
    "\uff32\042\uff32\045\uff32\051\uff32\053\uff32\055\uff32\057\uff32" +
    "\060\uff32\061\uff32\066\uff32\076\uff32\077\uff32\100\uff32\104" +
    "\uff32\001\002\000\074\002\uff30\003\uff30\012\uff30\013\uff30" +
    "\017\uff30\022\uff30\023\uff30\024\uff30\026\uff30\027\uff30\030" +
    "\uff30\033\uff30\034\uff30\035\uff30\036\uff30\041\uff30\042\uff30" +
    "\045\uff30\051\uff30\053\uff30\055\uff30\057\uff30\060\uff30\061" +
    "\uff30\066\uff30\076\uff30\077\uff30\100\uff30\104\uff30\001\002" +
    "\000\036\017\u0193\022\uff28\023\u018d\024\u018c\027\u0189\034" +
    "\u0191\035\051\036\044\042\057\051\u0190\055\u018e\057\u018f" +
    "\060\u0192\100\u018a\001\002\000\006\061\u015f\104\u015e\001" +
    "\002\000\016\003\u016d\004\ufff6\040\u016c\054\u016e\104\ufff6" +
    "\110\ufff6\001\002\000\012\004\ufff6\057\u0162\104\ufff6\110" +
    "\ufff6\001\002\000\004\104\u0169\001\002\000\074\002\uff31" +
    "\003\uff31\012\uff31\013\u0167\017\uff31\022\uff31\023\uff31\024" +
    "\uff31\026\uff31\027\uff31\030\uff31\033\uff31\034\uff31\035\uff31" +
    "\036\uff31\041\uff31\042\uff31\045\uff31\051\uff31\053\uff31\055" +
    "\uff31\057\uff31\060\uff31\061\uff31\066\uff31\076\uff31\077\uff31" +
    "\100\uff31\104\uff31\001\002\000\014\004\uffec\005\063\065" +
    "\066\104\uffec\110\uffec\001\002\000\010\004\ufff6\104\ufff6" +
    "\110\ufff6\001\002\000\004\104\u0165\001\002\000\014\003" +
    "\115\004\ufff6\005\063\065\116\072\107\001\002\000\076" +
    "\002\uff2f\003\uff2f\012\uff2f\013\uff2f\017\uff2f\022\uff2f\023" +
    "\uff2f\024\uff2f\026\uff2f\027\uff2f\030\uff2f\033\uff2f\034\uff2f" +
    "\035\uff2f\036\uff2f\041\uff2f\042\uff2f\045\uff2f\051\uff2f\053" +
    "\uff2f\055\uff2f\057\uff2f\060\uff2f\061\uff2f\066\uff2f\076\uff2f" +
    "\077\uff2f\100\uff2f\104\uff2f\106\122\001\002\000\012\004" +
    "\ufff6\057\u0162\104\ufff6\110\ufff6\001\002\000\074\002\uff2d" +
    "\003\uff2d\012\uff2d\013\uff2d\017\uff2d\022\uff2d\023\uff2d\024" +
    "\uff2d\026\uff2d\027\uff2d\030\uff2d\033\uff2d\034\uff2d\035\uff2d" +
    "\036\uff2d\041\uff2d\042\uff2d\045\uff2d\051\uff2d\053\uff2d\055" +
    "\uff2d\057\uff2d\060\uff2d\061\uff2d\066\uff2d\076\uff2d\077\uff2d" +
    "\100\uff2d\104\uff2d\001\002\000\010\004\ufff6\104\ufff6\110" +
    "\ufff6\001\002\000\074\002\uff2e\003\uff2e\012\uff2e\013\uff2e" +
    "\017\uff2e\022\uff2e\023\uff2e\024\uff2e\026\uff2e\027\uff2e\030" +
    "\uff2e\033\uff2e\034\uff2e\035\uff2e\036\uff2e\041\uff2e\042\uff2e" +
    "\045\uff2e\051\uff2e\053\uff2e\055\uff2e\057\uff2e\060\uff2e\061" +
    "\uff2e\066\uff2e\076\uff2e\077\uff2e\100\uff2e\104\uff2e\001\002" +
    "\000\064\002\uff51\003\uff51\012\uff51\013\uff51\017\uff51\022" +
    "\uff51\024\uff51\026\uff51\027\uff51\030\uff51\033\uff51\035\uff51" +
    "\036\uff51\041\uff51\042\uff51\045\uff51\053\uff51\055\uff51\057" +
    "\uff51\060\uff51\065\u017f\066\uff51\076\uff51\077\uff51\100\uff51" +
    "\001\002\000\042\003\uff47\012\uff47\017\uff47\024\uff47\026" +
    "\uff47\027\uff47\033\uff47\035\uff47\036\uff47\041\uff47\042\uff47" +
    "\045\uff47\055\uff47\057\uff47\060\uff47\100\uff47\001\002\000" +
    "\062\002\uff4c\003\uff4c\012\uff4c\013\uff4c\017\uff4c\022\uff4c" +
    "\024\uff4c\026\uff4c\027\uff4c\030\uff4c\033\uff4c\035\uff4c\036" +
    "\uff4c\041\uff4c\042\uff4c\045\uff4c\053\uff4c\055\uff4c\057\uff4c" +
    "\060\uff4c\066\uff4c\076\uff4c\077\uff4c\100\uff4c\001\002\000" +
    "\042\003\uff47\012\uff47\017\uff47\022\uff47\024\uff47\026\uff47" +
    "\027\uff47\035\uff47\036\uff47\041\uff47\042\uff47\045\uff47\055" +
    "\uff47\057\uff47\060\uff47\100\uff47\001\002\000\062\002\uff35" +
    "\003\uff35\012\uff35\013\uff35\017\uff35\022\uff35\024\uff35\026" +
    "\uff35\027\uff35\030\uff35\033\uff35\035\uff35\036\uff35\041\uff35" +
    "\042\uff35\045\uff35\053\uff35\055\uff35\057\uff35\060\uff35\066" +
    "\uff35\076\u0170\077\u0171\100\uff35\001\002\000\014\003\u015b" +
    "\004\102\052\u015c\104\031\110\005\001\002\000\014\003" +
    "\u015b\004\102\052\u015c\104\031\110\005\001\002\000\064" +
    "\002\uff4d\003\uff4d\012\uff4d\013\uff4d\017\uff4d\022\uff4d\024" +
    "\uff4d\026\uff4d\027\uff4d\030\uff4d\033\uff4d\035\uff4d\036\uff4d" +
    "\041\uff4d\042\uff4d\045\uff4d\053\uff4d\055\uff4d\057\uff4d\060" +
    "\uff4d\061\u015f\066\uff4d\076\uff4d\077\uff4d\100\uff4d\001\002" +
    "\000\064\002\uff4e\003\uff4e\012\uff4e\013\uff4e\017\uff4e\022" +
    "\uff4e\024\uff4e\026\uff4e\027\uff4e\030\uff4e\033\uff4e\035\uff4e" +
    "\036\uff4e\041\uff4e\042\uff4e\045\uff4e\053\uff4e\055\uff4e\057" +
    "\uff4e\060\uff4e\061\u015f\066\uff4e\076\uff4e\077\uff4e\100\uff4e" +
    "\001\002\000\042\003\u0179\012\056\017\061\022\u0175\024" +
    "\053\026\047\027\u0150\035\051\036\044\041\u0149\042\057" +
    "\045\052\055\u014f\057\054\060\060\100\u0177\001\002\000" +
    "\062\002\uff52\003\uff52\012\uff52\013\uff52\017\uff52\022\uff52" +
    "\024\uff52\026\uff52\027\uff52\030\uff52\033\uff52\035\uff52\036" +
    "\uff52\041\uff52\042\uff52\045\uff52\053\uff52\055\uff52\057\uff52" +
    "\060\uff52\066\uff52\076\uff52\077\uff52\100\uff52\001\002\000" +
    "\044\003\uff46\012\uff46\017\uff46\022\uff46\024\uff46\026\uff46" +
    "\027\uff46\033\uff46\035\uff46\036\uff46\041\uff46\042\uff46\045" +
    "\uff46\055\uff46\057\uff46\060\uff46\100\uff46\001\002\000\044" +
    "\003\uff45\012\uff45\017\uff45\022\uff45\024\uff45\026\uff45\027" +
    "\uff45\033\uff45\035\uff45\036\uff45\041\uff45\042\uff45\045\uff45" +
    "\055\uff45\057\uff45\060\uff45\100\uff45\001\002\000\044\003" +
    "\uff3d\012\uff3d\017\uff3d\022\uff3d\024\uff3d\026\uff3d\027\uff3d" +
    "\033\uff3d\035\uff3d\036\uff3d\041\uff3d\042\uff3d\045\uff3d\055" +
    "\uff3d\057\uff3d\060\uff3d\100\uff3d\001\002\000\044\003\uff3c" +
    "\012\uff3c\017\uff3c\022\uff3c\024\uff3c\026\uff3c\027\uff3c\033" +
    "\uff3c\035\uff3c\036\uff3c\041\uff3c\042\uff3c\045\uff3c\055\uff3c" +
    "\057\uff3c\060\uff3c\100\uff3c\001\002\000\042\003\u0179\012" +
    "\056\017\061\024\053\026\047\027\u0150\033\u017b\035\051" +
    "\036\044\041\u0149\042\057\045\052\055\u014f\057\054\060" +
    "\060\100\u0177\001\002\000\016\003\u016d\004\ufff6\040\u016c" +
    "\054\u016e\104\ufff6\110\ufff6\001\002\000\010\022\u017d\076" +
    "\u0170\077\u0171\001\002\000\062\002\uff4f\003\uff4f\012\uff4f" +
    "\013\uff4f\017\uff4f\022\uff4f\024\uff4f\026\uff4f\027\uff4f\030" +
    "\uff4f\033\uff4f\035\uff4f\036\uff4f\041\uff4f\042\uff4f\045\uff4f" +
    "\053\uff4f\055\uff4f\057\uff4f\060\uff4f\066\uff4f\076\uff4f\077" +
    "\uff4f\100\uff4f\001\002\000\064\002\uff49\003\uff49\012\uff49" +
    "\013\uff49\017\uff49\022\uff49\024\uff49\026\uff49\027\uff49\030" +
    "\uff49\033\uff49\035\uff49\036\uff49\041\uff49\042\uff49\045\uff49" +
    "\053\uff49\055\uff49\057\uff49\060\uff49\065\uff49\066\uff49\076" +
    "\uff49\077\uff49\100\uff49\001\002\000\054\003\u016d\004\ufff6" +
    "\012\uff44\017\uff44\024\uff44\026\uff44\027\uff44\035\uff44\036" +
    "\uff44\040\u016c\041\uff44\042\uff44\045\uff44\054\u016e\055\uff44" +
    "\057\uff44\060\uff44\066\uff44\100\uff44\104\ufff6\110\ufff6\001" +
    "\002\000\064\002\uff50\003\uff50\012\uff50\013\uff50\017\uff50" +
    "\022\uff50\024\uff50\026\uff50\027\uff50\030\uff50\033\uff50\035" +
    "\uff50\036\uff50\041\uff50\042\uff50\045\uff50\053\uff50\055\uff50" +
    "\057\uff50\060\uff50\065\u017f\066\uff50\076\uff50\077\uff50\100" +
    "\uff50\001\002\000\064\002\uff48\003\uff48\012\uff48\013\uff48" +
    "\017\uff48\022\uff48\024\uff48\026\uff48\027\uff48\030\uff48\033" +
    "\uff48\035\uff48\036\uff48\041\uff48\042\uff48\045\uff48\053\uff48" +
    "\055\uff48\057\uff48\060\uff48\065\uff48\066\uff48\076\uff48\077" +
    "\uff48\100\uff48\001\002\000\010\066\u0187\076\u0170\077\u0171" +
    "\001\002\000\040\012\056\017\061\024\053\026\047\027" +
    "\u0150\035\051\036\044\041\u0149\042\057\045\052\055\u014f" +
    "\057\054\060\060\066\u0184\100\u0185\001\002\000\064\002" +
    "\uff4a\003\uff4a\012\uff4a\013\uff4a\017\uff4a\022\uff4a\024\uff4a" +
    "\026\uff4a\027\uff4a\030\uff4a\033\uff4a\035\uff4a\036\uff4a\041" +
    "\uff4a\042\uff4a\045\uff4a\053\uff4a\055\uff4a\057\uff4a\060\uff4a" +
    "\065\uff4a\066\uff4a\076\uff4a\077\uff4a\100\uff4a\001\002\000" +
    "\040\012\uff42\017\uff42\024\uff42\026\uff42\027\uff42\035\uff42" +
    "\036\uff42\041\uff42\042\uff42\045\uff42\055\uff42\057\uff42\060" +
    "\uff42\066\uff42\100\uff42\001\002\000\040\012\uff43\017\uff43" +
    "\024\uff43\026\uff43\027\uff43\035\uff43\036\uff43\041\uff43\042" +
    "\uff43\045\uff43\055\uff43\057\uff43\060\uff43\066\uff43\100\uff43" +
    "\001\002\000\064\002\uff4b\003\uff4b\012\uff4b\013\uff4b\017" +
    "\uff4b\022\uff4b\024\uff4b\026\uff4b\027\uff4b\030\uff4b\033\uff4b" +
    "\035\uff4b\036\uff4b\041\uff4b\042\uff4b\045\uff4b\053\uff4b\055" +
    "\uff4b\057\uff4b\060\uff4b\065\uff4b\066\uff4b\076\uff4b\077\uff4b" +
    "\100\uff4b\001\002\000\010\004\102\104\031\110\005\001" +
    "\002\000\010\004\102\104\031\110\005\001\002\000\040" +
    "\017\u0193\022\uff28\023\u018d\024\u018c\027\u0189\034\u0191\035" +
    "\051\036\044\042\057\051\u0190\055\u018e\057\u018f\060\u0192" +
    "\066\uff28\100\u018a\001\002\000\004\022\u01c4\001\002\000" +
    "\004\004\071\001\002\000\010\004\uffec\005\063\065\066" +
    "\001\002\000\010\004\102\104\031\110\005\001\002\000" +
    "\010\004\uffec\005\063\065\066\001\002\000\012\004\ufff6" +
    "\057\u01a6\104\ufff6\110\ufff6\001\002\000\014\003\u015b\004" +
    "\102\052\u015c\104\031\110\005\001\002\000\006\004\uffe5" +
    "\044\074\001\002\000\012\004\uffec\005\063\037\067\065" +
    "\066\001\002\000\040\017\u0193\022\uff28\023\u018d\024\u018c" +
    "\027\u0189\034\u0191\035\051\036\044\042\057\051\u0190\055" +
    "\u018e\057\u018f\060\u0192\066\uff28\100\u018a\001\002\000\006" +
    "\022\uff27\066\uff27\001\002\000\044\013\165\017\uff23\022" +
    "\uff23\023\uff23\024\uff23\027\uff23\034\uff23\035\uff23\036\uff23" +
    "\042\uff23\051\uff23\055\uff23\057\uff23\060\uff23\064\u0197\066" +
    "\uff23\100\uff23\001\002\000\010\004\uffec\005\063\065\066" +
    "\001\002\000\042\013\174\017\uff22\022\uff22\023\uff22\024" +
    "\uff22\027\uff22\034\uff22\035\uff22\036\uff22\042\uff22\051\uff22" +
    "\055\uff22\057\uff22\060\uff22\066\uff22\100\uff22\001\002\000" +
    "\004\004\071\001\002\000\042\013\u019b\017\uff1f\022\uff1f" +
    "\023\uff1f\024\uff1f\027\uff1f\034\uff1f\035\uff1f\036\uff1f\042" +
    "\uff1f\051\uff1f\055\uff1f\057\uff1f\060\uff1f\066\uff1f\100\uff1f" +
    "\001\002\000\006\004\uffe5\044\074\001\002\000\042\013" +
    "\uff10\017\uff10\022\uff10\023\uff10\024\uff10\027\uff10\034\uff10" +
    "\035\uff10\036\uff10\042\uff10\051\uff10\055\uff10\057\uff10\060" +
    "\uff10\066\uff10\100\uff10\001\002\000\004\076\u019e\001\002" +
    "\000\014\003\115\004\ufff6\005\063\065\116\072\107\001" +
    "\002\000\044\013\uff11\017\uff11\022\uff11\023\uff11\024\uff11" +
    "\027\uff11\034\uff11\035\uff11\036\uff11\042\uff11\051\uff11\055" +
    "\uff11\057\uff11\060\uff11\066\uff11\100\uff11\106\122\001\002" +
    "\000\050\004\102\017\uff32\022\uff32\023\uff32\024\uff32\027" +
    "\uff32\034\uff32\035\uff32\036\uff32\042\uff32\051\uff32\055\uff32" +
    "\057\uff32\060\uff32\061\uff32\066\uff32\100\uff32\104\031\110" +
    "\005\001\002\000\042\017\uff1b\022\uff1b\023\uff1b\024\uff1b" +
    "\027\uff1b\034\uff1b\035\uff1b\036\uff1b\042\uff1b\051\uff1b\055" +
    "\uff1b\057\uff1b\060\uff1b\061\u015f\066\uff1b\100\uff1b\001\002" +
    "\000\046\004\102\017\uff1a\022\uff1a\023\uff1a\024\uff1a\027" +
    "\uff1a\034\uff1a\035\uff1a\036\uff1a\042\uff1a\051\uff1a\055\uff1a" +
    "\057\uff1a\060\uff1a\066\uff1a\100\uff1a\104\031\110\005\001" +
    "\002\000\004\104\u01ac\001\002\000\044\013\uff0c\017\uff0c" +
    "\022\uff0c\023\uff0c\024\uff0c\027\uff0c\034\uff0c\035\uff0c\036" +
    "\uff0c\042\uff0c\051\uff0c\055\uff0c\057\uff0c\060\uff0c\066\uff0c" +
    "\100\uff0c\104\u01a8\001\002\000\042\013\u01aa\017\uff1c\022" +
    "\uff1c\023\uff1c\024\uff1c\027\uff1c\034\uff1c\035\uff1c\036\uff1c" +
    "\042\uff1c\051\uff1c\055\uff1c\057\uff1c\060\uff1c\066\uff1c\100" +
    "\uff1c\001\002\000\010\004\ufff6\104\ufff6\110\ufff6\001\002" +
    "\000\044\013\uff0b\017\uff0b\022\uff0b\023\uff0b\024\uff0b\027" +
    "\uff0b\034\uff0b\035\uff0b\036\uff0b\042\uff0b\051\uff0b\055\uff0b" +
    "\057\uff0b\060\uff0b\066\uff0b\100\uff0b\104\u01a8\001\002\000" +
    "\010\004\ufff6\104\ufff6\110\ufff6\001\002\000\044\013\uff08" +
    "\017\uff08\022\uff08\023\uff08\024\uff08\027\uff08\034\uff08\035" +
    "\uff08\036\uff08\042\uff08\051\uff08\055\uff08\057\uff08\060\uff08" +
    "\066\uff08\100\uff08\104\uff08\001\002\000\012\004\ufff6\057" +
    "\u01a6\104\ufff6\110\ufff6\001\002\000\042\013\uff0a\017\uff0a" +
    "\022\uff0a\023\uff0a\024\uff0a\027\uff0a\034\uff0a\035\uff0a\036" +
    "\uff0a\042\uff0a\051\uff0a\055\uff0a\057\uff0a\060\uff0a\066\uff0a" +
    "\100\uff0a\001\002\000\010\004\ufff6\104\ufff6\110\ufff6\001" +
    "\002\000\044\013\uff09\017\uff09\022\uff09\023\uff09\024\uff09" +
    "\027\uff09\034\uff09\035\uff09\036\uff09\042\uff09\051\uff09\055" +
    "\uff09\057\uff09\060\uff09\066\uff09\100\uff09\104\uff09\001\002" +
    "\000\042\013\u01b3\017\uff21\022\uff21\023\uff21\024\uff21\027" +
    "\uff21\034\uff21\035\uff21\036\uff21\042\uff21\051\uff21\055\uff21" +
    "\057\uff21\060\uff21\066\uff21\100\uff21\001\002\000\004\004" +
    "\071\001\002\000\044\013\uff14\017\uff14\022\uff14\023\uff14" +
    "\024\uff14\027\uff14\034\uff14\035\uff14\036\uff14\042\uff14\051" +
    "\uff14\055\uff14\057\uff14\060\uff14\066\uff14\100\uff14\104\u01b1" +
    "\001\002\000\014\003\115\004\ufff6\005\063\065\116\072" +
    "\107\001\002\000\044\013\uff13\017\uff13\022\uff13\023\uff13" +
    "\024\uff13\027\uff13\034\uff13\035\uff13\036\uff13\042\uff13\051" +
    "\uff13\055\uff13\057\uff13\060\uff13\066\uff13\100\uff13\106\122" +
    "\001\002\000\010\004\uffec\005\063\065\066\001\002\000" +
    "\042\013\uff12\017\uff12\022\uff12\023\uff12\024\uff12\027\uff12" +
    "\034\uff12\035\uff12\036\uff12\042\uff12\051\uff12\055\uff12\057" +
    "\uff12\060\uff12\066\uff12\100\uff12\001\002\000\004\076\u01b9" +
    "\001\002\000\042\013\u01b7\017\uff25\022\uff25\023\uff25\024" +
    "\uff25\027\uff25\034\uff25\035\uff25\036\uff25\042\uff25\051\uff25" +
    "\055\uff25\057\uff25\060\uff25\066\uff25\100\uff25\001\002\000" +
    "\010\004\102\104\031\110\005\001\002\000\042\013\uff17" +
    "\017\uff17\022\uff17\023\uff17\024\uff17\027\uff17\034\uff17\035" +
    "\uff17\036\uff17\042\uff17\051\uff17\055\uff17\057\uff17\060\uff17" +
    "\066\uff17\100\uff17\001\002\000\014\003\u015b\004\102\052" +
    "\u015c\104\031\110\005\001\002\000\046\013\uff19\017\uff19" +
    "\022\uff19\023\uff19\024\uff19\027\uff19\034\uff19\035\uff19\036" +
    "\uff19\042\uff19\051\uff19\055\uff19\057\uff19\060\uff19\061\u015f" +
    "\066\uff19\100\uff19\104\u01bb\001\002\000\010\004\ufff6\104" +
    "\ufff6\110\ufff6\001\002\000\042\013\uff18\017\uff18\022\uff18" +
    "\023\uff18\024\uff18\027\uff18\034\uff18\035\uff18\036\uff18\042" +
    "\uff18\051\uff18\055\uff18\057\uff18\060\uff18\066\uff18\100\uff18" +
    "\001\002\000\042\013\u01b3\017\uff20\022\uff20\023\uff20\024" +
    "\uff20\027\uff20\034\uff20\035\uff20\036\uff20\042\uff20\051\uff20" +
    "\055\uff20\057\uff20\060\uff20\066\uff20\100\uff20\001\002\000" +
    "\042\013\u01c2\017\uff1e\022\uff1e\023\uff1e\024\uff1e\027\uff1e" +
    "\034\uff1e\035\uff1e\036\uff1e\042\uff1e\051\uff1e\055\uff1e\057" +
    "\uff1e\060\uff1e\066\uff1e\100\uff1e\001\002\000\044\013\uff0f" +
    "\017\uff0f\022\uff0f\023\uff0f\024\uff0f\027\uff0f\034\uff0f\035" +
    "\uff0f\036\uff0f\042\uff0f\043\u01c0\051\uff0f\055\uff0f\057\uff0f" +
    "\060\uff0f\066\uff0f\100\uff0f\001\002\000\014\003\115\004" +
    "\ufff6\005\063\065\116\072\107\001\002\000\044\013\uff0e" +
    "\017\uff0e\022\uff0e\023\uff0e\024\uff0e\027\uff0e\034\uff0e\035" +
    "\uff0e\036\uff0e\042\uff0e\051\uff0e\055\uff0e\057\uff0e\060\uff0e" +
    "\066\uff0e\100\uff0e\106\122\001\002\000\004\004\071\001" +
    "\002\000\042\013\uff0d\017\uff0d\022\uff0d\023\uff0d\024\uff0d" +
    "\027\uff0d\034\uff0d\035\uff0d\036\uff0d\042\uff0d\051\uff0d\055" +
    "\uff0d\057\uff0d\060\uff0d\066\uff0d\100\uff0d\001\002\000\074" +
    "\002\uff33\003\uff33\012\uff33\013\uff33\017\uff33\022\uff33\023" +
    "\uff33\024\uff33\026\uff33\027\uff33\030\uff33\033\uff33\034\uff33" +
    "\035\uff33\036\uff33\041\uff33\042\uff33\045\uff33\051\uff33\053" +
    "\uff33\055\uff33\057\uff33\060\uff33\061\uff33\066\uff33\076\uff33" +
    "\077\uff33\100\uff33\104\uff33\001\002\000\006\022\uff26\066" +
    "\uff26\001\002\000\006\065\uff05\076\uff05\001\002\000\042" +
    "\013\u01c8\017\uff24\022\uff24\023\uff24\024\uff24\027\uff24\034" +
    "\uff24\035\uff24\036\uff24\042\uff24\051\uff24\055\uff24\057\uff24" +
    "\060\uff24\066\uff24\100\uff24\001\002\000\010\004\102\104" +
    "\031\110\005\001\002\000\042\013\uff15\017\uff15\022\uff15" +
    "\023\uff15\024\uff15\027\uff15\034\uff15\035\uff15\036\uff15\042" +
    "\uff15\051\uff15\055\uff15\057\uff15\060\uff15\066\uff15\100\uff15" +
    "\001\002\000\006\065\u0158\076\u01cb\001\002\000\010\004" +
    "\102\104\031\110\005\001\002\000\042\013\uff16\017\uff16" +
    "\022\uff16\023\uff16\024\uff16\027\uff16\034\uff16\035\uff16\036" +
    "\uff16\042\uff16\051\uff16\055\uff16\057\uff16\060\uff16\066\uff16" +
    "\100\uff16\001\002\000\046\004\102\017\uff1d\022\uff1d\023" +
    "\uff1d\024\uff1d\027\uff1d\034\uff1d\035\uff1d\036\uff1d\042\uff1d" +
    "\051\uff1d\055\uff1d\057\uff1d\060\uff1d\066\uff1d\100\uff1d\104" +
    "\031\110\005\001\002\000\004\076\u01d2\001\002\000\004" +
    "\066\uff06\001\002\000\004\066\u01d1\001\002\000\012\065" +
    "\uff04\076\uff04\077\uff04\104\uff04\001\002\000\014\003\u015b" +
    "\004\102\052\u015c\104\031\110\005\001\002\000\006\061" +
    "\u015f\066\uff07\001\002\000\006\061\u015f\104\u01d5\001\002" +
    "\000\016\003\u016d\004\ufff6\040\u016c\054\u016e\104\ufff6\110" +
    "\ufff6\001\002\000\062\002\uff36\003\uff36\012\uff36\013\uff36" +
    "\017\uff36\022\uff36\024\uff36\026\uff36\027\uff36\030\uff36\033" +
    "\uff36\035\uff36\036\uff36\041\uff36\042\uff36\045\uff36\053\uff36" +
    "\055\uff36\057\uff36\060\uff36\066\uff36\076\u0170\077\u0171\100" +
    "\uff36\001\002\000\062\002\uff37\003\uff37\012\uff37\013\uff37" +
    "\017\uff37\022\uff37\024\uff37\026\uff37\027\uff37\030\uff37\033" +
    "\uff37\035\uff37\036\uff37\041\uff37\042\uff37\045\uff37\053\uff37" +
    "\055\uff37\057\uff37\060\uff37\066\uff37\076\u0170\077\u0171\100" +
    "\uff37\001\002\000\010\076\u01dd\077\u01de\104\u01dc\001\002" +
    "\000\056\002\uff40\003\uff40\012\uff40\013\u01da\017\uff40\022" +
    "\uff40\024\uff40\026\uff40\027\uff40\030\uff40\033\uff40\035\uff40" +
    "\036\uff40\041\uff40\042\uff40\045\uff40\053\uff40\055\uff40\057" +
    "\uff40\060\uff40\066\uff40\100\uff40\001\002\000\010\004\102" +
    "\104\031\110\005\001\002\000\056\002\uff38\003\uff38\012" +
    "\uff38\013\uff38\017\uff38\022\uff38\024\uff38\026\uff38\027\uff38" +
    "\030\uff38\033\uff38\035\uff38\036\uff38\041\uff38\042\uff38\045" +
    "\uff38\053\uff38\055\uff38\057\uff38\060\uff38\066\uff38\100\uff38" +
    "\001\002\000\016\003\u016d\004\ufff6\040\u016c\054\u016e\104" +
    "\ufff6\110\ufff6\001\002\000\014\003\u015b\004\102\052\u015c" +
    "\104\031\110\005\001\002\000\014\003\u015b\004\102\052" +
    "\u015c\104\031\110\005\001\002\000\006\061\u015f\104\u01e0" +
    "\001\002\000\016\003\u016d\004\ufff6\040\u016c\054\u016e\104" +
    "\ufff6\110\ufff6\001\002\000\062\002\uff39\003\uff39\012\uff39" +
    "\013\uff39\017\uff39\022\uff39\024\uff39\026\uff39\027\uff39\030" +
    "\uff39\033\uff39\035\uff39\036\uff39\041\uff39\042\uff39\045\uff39" +
    "\053\uff39\055\uff39\057\uff39\060\uff39\066\uff39\076\u0170\077" +
    "\u0171\100\uff39\001\002\000\006\061\u015f\104\u01e3\001\002" +
    "\000\016\003\u016d\004\ufff6\040\u016c\054\u016e\104\ufff6\110" +
    "\ufff6\001\002\000\062\002\uff3a\003\uff3a\012\uff3a\013\uff3a" +
    "\017\uff3a\022\uff3a\024\uff3a\026\uff3a\027\uff3a\030\uff3a\033" +
    "\uff3a\035\uff3a\036\uff3a\041\uff3a\042\uff3a\045\uff3a\053\uff3a" +
    "\055\uff3a\057\uff3a\060\uff3a\066\uff3a\076\u0170\077\u0171\100" +
    "\uff3a\001\002\000\062\002\uff3b\003\uff3b\012\uff3b\013\uff3b" +
    "\017\uff3b\022\uff3b\024\uff3b\026\uff3b\027\uff3b\030\uff3b\033" +
    "\uff3b\035\uff3b\036\uff3b\041\uff3b\042\uff3b\045\uff3b\053\uff3b" +
    "\055\uff3b\057\uff3b\060\uff3b\066\uff3b\076\u0170\077\u0171\100" +
    "\uff3b\001\002\000\054\002\ufefc\012\ufefc\014\237\017\ufefc" +
    "\024\ufefc\026\ufefc\027\ufefc\030\ufefc\031\240\035\ufefc\036" +
    "\ufefc\041\ufefc\042\ufefc\045\ufefc\046\236\053\ufefc\055\ufefc" +
    "\057\ufefc\060\ufefc\076\241\100\ufefc\001\002\000\004\104" +
    "\u01eb\001\002\000\046\002\ufefe\012\ufefe\013\u01e9\017\ufefe" +
    "\024\ufefe\026\ufefe\027\ufefe\030\ufefe\035\ufefe\036\ufefe\041" +
    "\ufefe\042\ufefe\045\ufefe\053\ufefe\055\ufefe\057\ufefe\060\ufefe" +
    "\100\ufefe\001\002\000\010\004\102\104\031\110\005\001" +
    "\002\000\046\002\uff2b\012\uff2b\013\uff2b\017\uff2b\024\uff2b" +
    "\026\uff2b\027\uff2b\030\uff2b\035\uff2b\036\uff2b\041\uff2b\042" +
    "\uff2b\045\uff2b\053\uff2b\055\uff2b\057\uff2b\060\uff2b\100\uff2b" +
    "\001\002\000\014\003\u015b\004\102\052\u015c\104\031\110" +
    "\005\001\002\000\050\002\uff2c\012\uff2c\013\uff2c\017\uff2c" +
    "\024\uff2c\026\uff2c\027\uff2c\030\uff2c\035\uff2c\036\uff2c\041" +
    "\uff2c\042\uff2c\045\uff2c\053\uff2c\055\uff2c\057\uff2c\060\uff2c" +
    "\061\u015f\100\uff2c\001\002\000\006\065\uff05\104\uff05\001" +
    "\002\000\046\002\ufefd\012\ufefd\013\u01ef\017\ufefd\024\ufefd" +
    "\026\ufefd\027\ufefd\030\ufefd\035\ufefd\036\ufefd\041\ufefd\042" +
    "\ufefd\045\ufefd\053\ufefd\055\ufefd\057\ufefd\060\ufefd\100\ufefd" +
    "\001\002\000\010\004\102\104\031\110\005\001\002\000" +
    "\046\002\uff29\012\uff29\013\uff29\017\uff29\024\uff29\026\uff29" +
    "\027\uff29\030\uff29\035\uff29\036\uff29\041\uff29\042\uff29\045" +
    "\uff29\053\uff29\055\uff29\057\uff29\060\uff29\100\uff29\001\002" +
    "\000\006\065\u0158\104\u01f2\001\002\000\014\003\u015b\004" +
    "\102\052\u015c\104\031\110\005\001\002\000\050\002\uff2a" +
    "\012\uff2a\013\uff2a\017\uff2a\024\uff2a\026\uff2a\027\uff2a\030" +
    "\uff2a\035\uff2a\036\uff2a\041\uff2a\042\uff2a\045\uff2a\053\uff2a" +
    "\055\uff2a\057\uff2a\060\uff2a\061\u015f\100\uff2a\001\002\000" +
    "\042\003\u0179\012\056\017\061\024\053\026\047\027\u0150" +
    "\033\u01f5\035\051\036\044\041\u0149\042\057\045\052\055" +
    "\u014f\057\054\060\060\100\u0177\001\002\000\042\003\uff47" +
    "\012\uff47\017\uff47\022\uff47\024\uff47\026\uff47\027\uff47\035" +
    "\uff47\036\uff47\041\uff47\042\uff47\045\uff47\055\uff47\057\uff47" +
    "\060\uff47\100\uff47\001\002\000\042\003\u0179\012\056\017" +
    "\061\022\u01f7\024\053\026\047\027\u0150\035\051\036\044" +
    "\041\u0149\042\057\045\052\055\u014f\057\054\060\060\100" +
    "\u0177\001\002\000\054\002\uff3e\003\uff3e\012\uff3e\017\uff3e" +
    "\022\uff3e\024\uff3e\026\uff3e\027\uff3e\030\uff3e\033\uff3e\035" +
    "\uff3e\036\uff3e\041\uff3e\042\uff3e\045\uff3e\053\uff3e\055\uff3e" +
    "\057\uff3e\060\uff3e\066\uff3e\100\uff3e\001\002\000\006\071" +
    "\u01fa\075\u013d\001\002\000\142\002\uffd2\003\uffd2\004\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\024\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\033\uffd2\035\uffd2\036\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\053\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\065\uffd2\066" +
    "\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\075\uffd2" +
    "\076\uffd2\100\uffd2\103\uffd2\104\uffd2\107\uffd2\110\uffd2\001" +
    "\002\000\142\002\uffd3\003\uffd3\004\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\033\uffd3\035\uffd3\036\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\053\uffd3\055\uffd3" +
    "\056\uffd3\057\uffd3\060\uffd3\065\uffd3\066\uffd3\067\uffd3\070" +
    "\uffd3\071\uffd3\072\uffd3\073\uffd3\075\uffd3\076\uffd3\100\uffd3" +
    "\103\uffd3\104\uffd3\107\uffd3\110\uffd3\001\002\000\014\014" +
    "\237\020\u01fc\031\240\046\236\076\241\001\002\000\052" +
    "\003\033\004\023\006\006\007\036\010\030\011\010\016" +
    "\032\025\007\032\017\040\034\044\011\047\026\062\012" +
    "\065\021\067\020\070\013\072\022\104\031\107\024\110" +
    "\005\001\002\000\106\002\uffbd\003\uffbd\012\uffbd\013\uffbd" +
    "\014\237\017\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\240\033\uffbd\035\uffbd\036\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\045\uffbd\046\236\053\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\066\uffbd\071\uffbd\073\uffbd" +
    "\075\uffbd\076\241\100\uffbd\103\uffbd\001\002\000\142\002" +
    "\uffe2\003\uffe2\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2" +
    "\035\uffe2\036\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\053\uffe2\055\uffe2\056\uffe2\057\uffe2" +
    "\060\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072" +
    "\uffe2\073\uffe2\075\uffe2\076\uffe2\100\uffe2\103\uffe2\104\uffe2" +
    "\107\uffe2\110\uffe2\001\002\000\106\002\uffbf\003\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\024\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf\035" +
    "\uffbf\036\uffbf\041\uffbf\042\uffbf\043\uffbf\045\uffbf\046\uffbf" +
    "\053\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\066\uffbf\071" +
    "\uffbf\073\uffbf\075\uffbf\076\uffbf\100\uffbf\103\uffbf\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01fd\000\022\003\024\006\034\014\014\015\015\016" +
    "\026\060\003\071\036\120\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\226\014" +
    "\211\020\u01fe\033\244\034\223\057\146\072\243\076\225" +
    "\001\001\000\002\001\001\000\006\006\u01fd\060\003\001" +
    "\001\000\016\006\034\014\014\015\u01fa\016\026\060\003" +
    "\071\036\001\001\000\020\006\034\014\014\015\u013b\016" +
    "\026\060\003\070\u01f7\071\036\001\001\000\012\021\u014d" +
    "\022\u0147\042\042\047\u014c\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\034\014\014\015\u0142\016\026" +
    "\060\003\071\036\001\001\000\020\006\034\014\014\015" +
    "\u013b\016\026\060\003\070\u013f\071\036\001\001\000\020" +
    "\006\034\014\014\015\u0135\016\026\060\003\067\u0136\071" +
    "\036\001\001\000\014\005\142\017\u012d\035\u012b\057\146" +
    "\066\u012c\001\001\000\002\001\001\000\010\005\142\017" +
    "\u012a\057\146\001\001\000\002\001\001\000\016\006\034" +
    "\014\014\015\u0128\016\026\060\003\071\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\034\014\014\015\u0125\016\026\060\003\071\036\001" +
    "\001\000\002\001\001\000\004\073\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\034\014\014\016" +
    "\037\060\003\001\001\000\002\001\001\000\004\073\u0121" +
    "\001\001\000\006\021\047\042\042\001\001\000\010\006" +
    "\u011e\060\003\062\u011f\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\034\014\014\015\u0115\016\026\060" +
    "\003\067\u0116\071\036\001\001\000\020\005\226\014\211" +
    "\025\u010b\032\u010a\034\223\057\146\076\u010c\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\u0102\061\u0104" +
    "\065\u0103\001\001\000\006\031\367\055\370\001\001\000" +
    "\010\007\063\026\366\063\167\001\001\000\002\001\001" +
    "\000\010\007\063\027\355\063\061\001\001\000\002\001" +
    "\001\000\024\005\226\007\160\014\211\023\212\033\221" +
    "\034\223\057\146\064\204\076\225\001\001\000\010\007" +
    "\063\027\064\063\061\001\001\000\004\004\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\160\064\157\001\001\000\006\007\063\063\067" +
    "\001\001\000\004\004\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\076\055\075\001\001\000\002" +
    "\001\001\000\010\010\156\011\105\065\112\001\001\000" +
    "\006\006\102\060\003\001\001\000\002\001\001\000\006" +
    "\030\100\055\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\107\010\111\011\105" +
    "\040\113\041\110\065\112\101\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\142\017\144\037\136" +
    "\057\146\100\140\001\001\000\002\001\001\000\010\010" +
    "\133\011\105\065\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\107\010\111\011\105\040\116\041\110\065\112\101\104" +
    "\001\001\000\002\001\001\000\022\007\107\010\111\011" +
    "\105\040\124\041\110\065\112\101\104\102\123\001\001" +
    "\000\002\001\001\000\020\007\107\010\111\011\105\040" +
    "\122\041\110\065\112\101\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\107\010" +
    "\111\011\105\040\130\041\110\065\112\101\104\001\001" +
    "\000\010\010\127\011\105\065\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\107\010\111\011\105\041" +
    "\135\065\112\001\001\000\010\010\133\011\105\065\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\007\107\010\111\011\105\040\150\041\110\065\112" +
    "\101\104\001\001\000\002\001\001\000\012\005\142\017" +
    "\144\037\153\057\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\107\010\111\011\105\041\155\065" +
    "\112\001\001\000\010\010\133\011\105\065\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\063\027\175\063\061\001\001\000\010\007" +
    "\063\026\166\063\167\001\001\000\002\001\001\000\004" +
    "\004\170\001\001\000\002\001\001\000\020\007\107\010" +
    "\111\011\105\040\172\041\110\065\112\101\104\001\001" +
    "\000\002\001\001\000\010\007\063\026\174\063\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\201\055\075\001\001\000\010\010\202\011" +
    "\105\065\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\226\014\211\033\352\034\223\057\146\076" +
    "\225\001\001\000\020\005\226\014\211\023\351\033\221" +
    "\034\223\057\146\076\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\350\060\003\001\001\000\020" +
    "\005\226\014\211\033\334\034\223\057\146\075\345\076" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\226\014\211\033\334\034\223\057\146\075\340\076" +
    "\225\001\001\000\020\005\226\014\211\033\322\034\223" +
    "\057\146\076\225\077\323\001\001\000\016\004\303\005" +
    "\142\017\306\036\307\057\146\074\302\001\001\000\002" +
    "\001\001\000\012\007\160\024\255\055\254\064\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\226\014" +
    "\211\034\227\057\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\226\014\211\033\253\034\223\057" +
    "\146\076\225\001\001\000\016\006\034\014\014\015\234" +
    "\016\026\060\003\071\036\001\001\000\020\007\107\010" +
    "\111\011\105\040\233\041\110\065\112\101\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\034\014" +
    "\014\015\252\016\026\060\003\071\036\001\001\000\016" +
    "\006\034\014\014\015\251\016\026\060\003\071\036\001" +
    "\001\000\022\005\226\014\211\020\242\033\244\034\223" +
    "\057\146\072\243\076\225\001\001\000\020\007\107\010" +
    "\111\011\105\040\241\041\110\065\112\101\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\034\014\014\015\246\016\026" +
    "\060\003\071\036\001\001\000\002\001\001\000\020\005" +
    "\226\014\211\033\244\034\223\057\146\072\250\076\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\272\057\146\001\001" +
    "\000\002\001\001\000\006\024\267\055\254\001\001\000" +
    "\004\055\260\001\001\000\006\005\261\057\146\001\001" +
    "\000\004\056\263\001\001\000\020\007\107\010\111\011" +
    "\105\040\266\041\110\065\112\101\104\001\001\000\002" +
    "\001\001\000\016\006\034\014\014\015\265\016\026\060" +
    "\003\071\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\271\055\254\001\001\000" +
    "\002\001\001\000\004\056\273\001\001\000\002\001\001" +
    "\000\016\006\034\014\014\015\275\016\026\060\003\071" +
    "\036\001\001\000\002\001\001\000\004\065\277\001\001" +
    "\000\004\060\301\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\315\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\303\005\142\017\306" +
    "\036\307\057\146\074\312\001\001\000\002\001\001\000" +
    "\016\005\226\014\211\033\314\034\223\057\146\076\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\226\014\211\033\317\034\223\057\146\076\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\226\014\211\033\326\034\223\057\146\076\225\001" +
    "\001\000\002\001\001\000\020\005\226\014\211\033\334" +
    "\034\223\057\146\075\333\076\225\001\001\000\002\001" +
    "\001\000\016\005\226\014\211\033\332\034\223\057\146" +
    "\076\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\226\014\211\033\337\034\223" +
    "\057\146\076\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\226\014\211\023\344\033\221\034\223\057" +
    "\146\076\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\034\014\014" +
    "\015\354\016\026\060\003\071\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\073\364\001\001\000\010" +
    "\007\063\026\360\063\167\001\001\000\002\001\001\000" +
    "\004\073\362\001\001\000\006\021\047\042\042\001\001" +
    "\000\002\001\001\000\006\021\047\042\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\371\060\003\001\001\000\002\001\001\000\006\013" +
    "\375\065\376\001\001\000\020\007\107\010\111\011\105" +
    "\040\374\041\110\065\112\101\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\377\001\001\000\002" +
    "\001\001\000\006\031\u0101\055\370\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\u0107\001\001\000\006" +
    "\012\u0105\065\u0103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\226" +
    "\014\211\032\u0114\034\223\057\146\076\u010c\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\226\014\211" +
    "\034\227\056\u010d\057\146\001\001\000\002\001\001\000" +
    "\016\006\034\014\014\015\u010f\016\026\060\003\071\036" +
    "\001\001\000\002\001\001\000\020\005\226\014\211\025" +
    "\u0111\032\u010a\034\223\057\146\076\u010c\001\001\000\002" +
    "\001\001\000\016\005\226\014\211\032\u0113\034\223\057" +
    "\146\076\u010c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\034\014" +
    "\014\015\u0119\016\026\060\003\071\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\034\014\014\015" +
    "\u011c\016\026\060\003\071\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\u0120\060\003\001\001\000\002\001\001\000\006" +
    "\021\047\042\042\001\001\000\004\073\u0123\001\001\000" +
    "\006\021\047\042\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\005\226\014\211\020\u0127\033\244\034" +
    "\223\057\146\072\243\076\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\034\014\014\015\u0130\016\026\060" +
    "\003\071\036\001\001\000\002\001\001\000\012\005\142" +
    "\017\u012d\035\u0133\057\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\034\014\014\015" +
    "\u013b\016\026\060\003\070\u013a\071\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\034\014\014\015\u013e\016\026\060\003\071\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\034\014\014\015\u0144\016\026\060\003\071\036\001" +
    "\001\000\002\001\001\000\016\006\034\014\014\015\u0146" +
    "\016\026\060\003\071\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\103\u01f3\001\001\000\010\006\u01ec" +
    "\053\u01ed\060\003\001\001\000\010\006\u01e6\051\u01e7\060" +
    "\003\001\001\000\016\006\034\014\014\015\u01e5\016\026" +
    "\060\003\071\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\u01d7\050\u01d8\060\003\001\001\000\010" +
    "\006\u0150\052\u0151\060\003\001\001\000\004\117\u0154\001" +
    "\001\000\002\001\001\000\010\006\u0150\052\u0153\060\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\u016a\043\u01d6\065\376\001\001\000\010\006\u0159\045\u01d3" +
    "\060\003\001\001\000\014\004\u01cd\042\u0187\054\u0193\107" +
    "\u01ce\121\u01cf\001\001\000\010\006\u0159\045\u015c\060\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\u0187\054\u0193\107\u018a\001\001\000\002\001\001\000\010" +
    "\013\u016a\043\u016e\065\376\001\001\000\010\013\u015f\065" +
    "\376\106\u0160\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\063\063\u0162\001\001\000\006\013\u0163\065" +
    "\376\001\001\000\002\001\001\000\020\007\107\010\111" +
    "\011\105\040\u0165\041\110\065\112\101\104\001\001\000" +
    "\002\001\001\000\010\013\u015f\065\376\106\u0167\001\001" +
    "\000\002\001\001\000\006\013\u0169\065\376\001\001\000" +
    "\002\001\001\000\006\044\u017d\105\u017f\001\001\000\004" +
    "\103\u0179\001\001\000\002\001\001\000\004\103\u0173\001" +
    "\001\000\002\001\001\000\010\006\u0159\045\u0172\060\003" +
    "\001\001\000\010\006\u0159\045\u0171\060\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\u014d\042\042" +
    "\046\u0175\047\u0177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\u014d\042\042\046\u0175\047\u0177\001\001\000" +
    "\010\013\u016a\043\u017b\065\376\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\u016a\043" +
    "\u0181\065\376\104\u0182\001\001\000\004\044\u0180\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\u014d\042" +
    "\042\047\u0185\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\u011e\060" +
    "\003\062\u01cc\001\001\000\010\006\u01c5\060\003\111\u01c6" +
    "\001\001\000\010\042\u0187\054\u0193\107\u01c4\001\001\000" +
    "\002\001\001\000\006\004\u01be\114\u01bd\001\001\000\010" +
    "\007\063\063\u01ae\112\u01bc\001\001\000\010\006\u01b4\060" +
    "\003\110\u01b5\001\001\000\010\007\063\063\u01ae\112\u01ad" +
    "\001\001\000\012\013\u01a2\065\376\115\u01a4\116\u01a3\001" +
    "\001\000\010\006\u019f\045\u01a0\060\003\001\001\000\006" +
    "\055\u0198\113\u0199\001\001\000\010\007\063\027\u0195\063" +
    "\061\001\001\000\010\042\u0187\054\u0193\107\u0194\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\063\026" +
    "\u0197\063\167\001\001\000\002\001\001\000\004\004\u019c" +
    "\001\001\000\002\001\001\000\006\055\u0198\113\u019b\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\007\107" +
    "\010\111\011\105\040\u019e\041\110\065\112\101\104\001" +
    "\001\000\002\001\001\000\010\006\u011e\060\003\062\u01a1" +
    "\001\001\000\002\001\001\000\006\006\u0120\060\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\u01a2\065\376\116\u01a6\001\001\000\002\001" +
    "\001\000\006\013\u01a8\065\376\001\001\000\002\001\001" +
    "\000\012\013\u01a2\065\376\115\u01aa\116\u01a3\001\001\000" +
    "\002\001\001\000\006\013\u01ac\065\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\u01af\001\001\000" +
    "\002\001\001\000\020\007\107\010\111\011\105\040\u01b1" +
    "\041\110\065\112\101\104\001\001\000\002\001\001\000" +
    "\010\007\063\063\u01ae\112\u01b3\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\u01b4\060" +
    "\003\110\u01b7\001\001\000\002\001\001\000\010\006\u0159" +
    "\045\u01b9\060\003\001\001\000\002\001\001\000\006\013" +
    "\u01bb\065\376\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\107\010" +
    "\111\011\105\040\u01c0\041\110\065\112\101\104\001\001" +
    "\000\002\001\001\000\006\004\u01be\114\u01c2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\117\u01c9\001\001\000\002\001\001\000\010\006\u01c5\060" +
    "\003\111\u01c8\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\u01cb\060\003\001\001\000\002\001\001\000" +
    "\006\006\u0120\060\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\u0159\045\u01d2\060\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\u016a\043\u01d5\065\376\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\u01d7\050\u01da\060\003\001\001\000" +
    "\002\001\001\000\010\013\u016a\043\u01e4\065\376\001\001" +
    "\000\010\006\u0159\045\u01e1\060\003\001\001\000\010\006" +
    "\u0159\045\u01de\060\003\001\001\000\002\001\001\000\010" +
    "\013\u016a\043\u01e0\065\376\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\u016a\043\u01e3\065\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\u01e6\051\u01e9" +
    "\060\003\001\001\000\002\001\001\000\010\006\u0159\045" +
    "\u01eb\060\003\001\001\000\002\001\001\000\004\117\u01f0" +
    "\001\001\000\002\001\001\000\010\006\u01ec\053\u01ef\060" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\u0159\045\u01f2\060\003\001\001\000\002\001\001\000" +
    "\012\021\u014d\042\042\046\u0175\047\u0177\001\001\000\004" +
    "\103\u01f5\001\001\000\012\021\u014d\042\042\046\u0175\047" +
    "\u0177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\034\014\014\015\u01fc\016\026\060\003\071\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SmlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SmlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SmlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	parseErrors = new ArrayList();

    }


	/** List of parse errors. */
	public List parseErrors;
	/** This method is called when a syntax error has been detected
	 * and recovery is about to be invoked. This parser adds
	 * the offending token to the parseErrors list. */
	public void syntax_error (java_cup.runtime.Symbol token) {
		parseErrors.add(token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SmlParser$actions {


	/** Returns an empty list. */
	private List list () {return new ArrayList();}
	/** Returns a list containing only the given object. */
	private List list (Object o) {List l = list(); append(l,o); return l;}
	/** Appends the given object to the end of the list. */
	private List append (List l, Object o) {l.add(o); return l;}
	/** Prepends the given object to the beginning of the list. */
	private List prepend (Object o, List l) {l.add(0,o); return l;}
	/** Concatenates two lists. */
	private List concat (List l1, List l2) {l1.addAll(l2); return l1;}
	

  private final SmlParser parser;

  /** Constructor */
  CUP$SmlParser$actions(SmlParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SmlParser$do_action(
    int                        CUP$SmlParser$act_num,
    java_cup.runtime.lr_parser CUP$SmlParser$parser,
    java.util.Stack            CUP$SmlParser$stack,
    int                        CUP$SmlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SmlParser$result;

      /* select the action based on the action number */
      switch (CUP$SmlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // topdec ::= SEMIC exp 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new ExpDec(e) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(16/*topdec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // topdec ::= FUNSIG funsigbind 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int fsbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int fsbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List fsb = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new FunsigDec(fsb) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(16/*topdec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // topdec ::= SIGNATURE sigbind 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List sb = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new SigDec(sb) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(16/*topdec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // topdec ::= strdec_ 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sdleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Dec sd = (Dec)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = sd; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(16/*topdec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // topdecs ::= topdecs SEMIC 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tdsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int tdsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List tds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = tds; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(78/*topdecs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // topdecs ::= topdecs topdec 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tdsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int tdsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List tds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Dec td = (Dec)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(tds,td); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(78/*topdecs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // topdecs ::= exp 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new ExpDec(e) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(78/*topdecs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // topdecs ::= 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = list(); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(78/*topdecs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // paramdescs ::= paramdescs LPAREN paramdesc RPAREN 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		List pds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		Desc pd = (Desc)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = append(pds,pd); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(77/*paramdescs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // paramdescs ::= 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = list(); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(77/*paramdescs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // paramdesc ::= specs 
            {
              Desc RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int ssleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List ss = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new ParamDesc(new BaseSig(ss).mark(ssleft,ssright)) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(79/*paramdesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // paramdesc ::= ident COLON sig 
            {
              Desc RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Sig s = (Sig)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new ParamDesc(id,s) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(79/*paramdesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // patheqn ::= patheqn EQUALS qident2 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int peleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List pe = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(pe,id); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(76/*patheqn*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // patheqn ::= qident2 EQUALS qident2 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int id1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Ident id1 = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id2 = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(list(id1),id2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(76/*patheqn*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // sharingdesc ::= sharingdesc AND sharingdesc 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sd1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int sd1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List sd1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int sd2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sd2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List sd2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(sd1,sd2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(75/*sharingdesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // sharingdesc ::= TYPE patheqn 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int peleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List pe = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new SharingDesc(pe,false) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(75/*sharingdesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // sharingdesc ::= patheqn 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int peleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List pe = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new SharingDesc(pe,true) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(75/*sharingdesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // exndesc ::= exndesc AND exndesc 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int ed1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int ed1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List ed1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int ed2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int ed2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List ed2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(ed1,ed2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(74/*exndesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // exndesc ::= ident OF type 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new ExnDesc(id,t) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(74/*exndesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // exndesc ::= ident 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new ExnDesc(id) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(74/*exndesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // valdesc ::= valdesc AND valdesc 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int vd1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int vd1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List vd1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int vd2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int vd2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List vd2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(vd1,vd2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(73/*valdesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // valdesc ::= op_ ident COLON type 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new ValDesc(id,t) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(73/*valdesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // typedesc ::= typedesc AND typedesc 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int td1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int td1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List td1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int td2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int td2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List td2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(td1,td2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(72/*typedesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // typedesc ::= tyvars ident EQUALS type 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tvsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int tvsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		List tvs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new TypeDesc(tvs,id,t) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(72/*typedesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // typedesc ::= tyvars ident 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tvsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int tvsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List tvs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new TypeDesc(tvs,id) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(72/*typedesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // fctdesc ::= fctdesc AND fctdesc 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int fd1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int fd1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List fd1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int fd2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int fd2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List fd2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(fd1,fd2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(71/*fctdesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // fctdesc ::= ident2 paramdescs COLON ident2 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int id1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		Ident id1 = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List pds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id2 = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new FctDesc(id1,pds,id2) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(71/*fctdesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // strdesc ::= strdesc AND strdesc 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sd1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int sd1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List sd1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int sd2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sd2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List sd2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(sd1,sd2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(70/*strdesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // strdesc ::= ident2 COLON sig EQUALS qident2 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int id1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).right;
		Ident id1 = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Sig s = (Sig)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id2 = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new StrDesc(id1,s,id2) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(70/*strdesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // strdesc ::= ident2 COLON sig 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Sig s = (Sig)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new StrDesc(id,s) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(70/*strdesc*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // spec ::= INCLUDE ident2 idents2 
            {
              Spec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List ids = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new IncludeSpec(prepend(id,ids)) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(42/*spec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // spec ::= INCLUDE sig 
            {
              Spec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Sig s = (Sig)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new IncludeSpec(s) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(42/*spec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // spec ::= SHARING sharingdesc 
            {
              Spec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sdleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List sd = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new SharingSpec(sd) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(42/*spec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // spec ::= fixity idents2 
            {
              Spec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		Fixity f = (Fixity)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List ids = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new FixitySpec(f,ids) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(42/*spec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // spec ::= EXCEPTION exndesc 
            {
              Spec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int edleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int edright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List ed = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new ExnSpec(ed) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(42/*spec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // spec ::= VAL valdesc 
            {
              Spec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int vdleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List vd = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new ValSpec(vd) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(42/*spec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // spec ::= EQTYPE typedesc 
            {
              Spec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List td = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new TypeSpec(td,true) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(42/*spec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // spec ::= TYPE typedesc 
            {
              Spec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List td = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new TypeSpec(td) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(42/*spec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // spec ::= DATATYPE datatypebind WITHTYPE typebind 
            {
              Spec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List db = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List tb = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new DatatypeSpec(db,tb) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(42/*spec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // spec ::= DATATYPE datatypebind 
            {
              Spec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List db = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new DatatypeSpec(db) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(42/*spec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // spec ::= FUNCTOR fctdesc 
            {
              Spec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int fdleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List fd = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new FctSpec(fd) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(42/*spec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // spec ::= STRUCTURE strdesc 
            {
              Spec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sdleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List sd = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new StrSpec(sd) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(42/*spec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // specs ::= SEMIC specs 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int ssleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List ss = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = ss; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(69/*specs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // specs ::= spec specs 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		Spec s = (Spec)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List ss = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = prepend(s,ss); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(69/*specs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // specs ::= 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = list(); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(69/*specs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // funsigbind ::= funsigbind AND funsigbind 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int fsb1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int fsb1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List fsb1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int fsb2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int fsb2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List fsb2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(fsb1,fsb2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(41/*funsigbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // funsigbind ::= ident2 paramdescs EQUALS sig 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List pds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Sig s = (Sig)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new FunsigBind(id,pds,s) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(41/*funsigbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // sigbind ::= sigbind AND sigbind 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sb1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int sb1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List sb1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int sb2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sb2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List sb2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(sb1,sb2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(39/*sigbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // sigbind ::= ident2 EQUALS sig 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Sig s = (Sig)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new SigBind(id,s) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(39/*sigbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // wherespecs ::= wherespecs AND wherespecs 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int ws1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int ws1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List ws1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int ws2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int ws2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List ws2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(ws1,ws2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(68/*wherespecs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // wherespecs ::= qident2 EQUALS qident2 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int id1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Ident id1 = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id2 = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new StructWhspec(id1,id2) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(68/*wherespecs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // wherespecs ::= TYPE tyvars qident2 EQUALS type 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tvsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int tvsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		List tvs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new TypeWhspec(tvs,id,t) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(68/*wherespecs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // sig ::= error 
            {
              Sig RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new ErrorSig(); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(35/*sig*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // sig ::= sig WHERE wherespecs 
            {
              Sig RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Sig s = (Sig)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int wsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List ws = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new WhereSig(s,ws) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(35/*sig*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // sig ::= ident2 
            {
              Sig RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new VarSig(id) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(35/*sig*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // sig ::= SIG specs END 
            {
              Sig RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int ssleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List ss = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new BaseSig(ss) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(35/*sig*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // fctbind ::= fctbind AND fctbind 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int fb1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int fb1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List fb1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int fb2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int fb2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List fb2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(fb1,fb2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(40/*fctbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // fctbind ::= ident2 paramdescs COLONGT sig EQUALS str 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).right;
		List pds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Sig sig = (Sig)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Str s = (Str)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new FctBind(id,pds,sig,s,true) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(40/*fctbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // fctbind ::= ident2 paramdescs COLON sig EQUALS str 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).right;
		List pds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Sig sig = (Sig)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Str s = (Str)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new FctBind(id,pds,sig,s) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(40/*fctbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // fctbind ::= ident2 paramdescs EQUALS str 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List pds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Str s = (Str)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new FctBind(id,pds,s) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(40/*fctbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // strbind ::= strbind AND strbind 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sb1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int sb1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List sb1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int sb2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sb2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List sb2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(sb1,sb2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(38/*strbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // strbind ::= ident2 COLONGT sig EQUALS str 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Sig sig = (Sig)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Str s = (Str)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new StrBind(id,s,sig,true) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(38/*strbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // strbind ::= ident2 COLON sig EQUALS str 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Sig sig = (Sig)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Str s = (Str)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new StrBind(id,s,sig) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(38/*strbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // strbind ::= ident2 EQUALS str 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Str s = (Str)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new StrBind(id,s) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(38/*strbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // strdec ::= error 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new ErrorDec(); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(36/*strdec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // strdec ::= strdec_ 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sdleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Dec sd = (Dec)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = sd; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(36/*strdec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // strdec_ ::= LOCAL strdecs IN strdecs END 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sd1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int sd1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		List sd1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int sd2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int sd2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List sd2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new LocalDec(sd1,sd2) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(37/*strdec_*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // strdec_ ::= FUNCTOR fctbind 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int fbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List fb = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new FctDec(fb) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(37/*strdec_*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // strdec_ ::= STRUCTURE strbind 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List sb = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new StrDec(sb) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(37/*strdec_*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // strdec_ ::= dec 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = d; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(37/*strdec_*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // strdecs_ ::= strdecs_ SEMIC 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sdsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int sdsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List sds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = sds; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(66/*strdecs_*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // strdecs_ ::= strdecs_ strdec_ 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sdsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int sdsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List sds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int sdleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Dec sd = (Dec)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(sds,sd); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(66/*strdecs_*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // strdecs_ ::= 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = list(); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(66/*strdecs_*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // strdecs ::= strdecs SEMIC 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sdsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int sdsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List sds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = sds; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(65/*strdecs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // strdecs ::= strdecs strdec 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sdsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int sdsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List sds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int sdleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Dec sd = (Dec)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(sds,sd); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(65/*strdecs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // strdecs ::= 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = list(); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(65/*strdecs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // fctargs ::= fctargs fctarg 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int fasleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int fasright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List fas = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Str fa = (Str)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(fas,fa); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(67/*fctargs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // fctargs ::= fctarg 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int faleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Str fa = (Str)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(fa); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(67/*fctargs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // fctarg ::= LPAREN strdecs_ RPAREN 
            {
              Str RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sdsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int sdsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List sds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new BaseStr(sds) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(34/*fctarg*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // fctarg ::= LPAREN str RPAREN 
            {
              Str RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		Str s = (Str)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = s; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(34/*fctarg*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // str ::= error 
            {
              Str RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new ErrorStr(); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(33/*str*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // str ::= str COLONGT sig 
            {
              Str RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Str s = (Str)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Sig sig = (Sig)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new SignedStr(s,sig,true) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(33/*str*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // str ::= str COLON sig 
            {
              Str RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Str s = (Str)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Sig sig = (Sig)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new SignedStr(s,sig) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(33/*str*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // str ::= LET strdecs IN str END 
            {
              Str RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sdsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int sdsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		List sds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		Str s = (Str)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new LetStr(sds,s) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(33/*str*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // str ::= qident2 fctargs 
            {
              Str RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int fasleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int fasright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List fas = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new AppStr(id,fas) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(33/*str*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // str ::= qident2 
            {
              Str RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new VarStr(id) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(33/*str*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // str ::= STRUCT strdecs END 
            {
              Str RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sdsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int sdsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List sds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new BaseStr(sds) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(33/*str*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // types ::= types COMMA type 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List ts = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(ts,t); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(64/*types*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // types ::= type 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(t); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(64/*types*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // typefield ::= label COLON type 
            {
              Field RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new TypeField(l,t) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(29/*typefield*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // typerecord ::= typerecord COMMA typefield 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List r = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(r,f); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(62/*typerecord*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // typerecord ::= typefield 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(f); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(62/*typerecord*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // typetuple ::= typetuple ASTERISK attype 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int ttleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List tt = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(tt,t); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(63/*typetuple*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // typetuple ::= attype ASTERISK attype 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int t1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(list(t1),t2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(63/*typetuple*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // tycon ::= qident 
            {
              Ident RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = id; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(6/*tycon*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // attype ::= LPAREN type RPAREN 
            {
              Type RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = t .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(31/*attype*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // attype ::= tycon 
            {
              Type RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tcleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident tc = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new ConType(tc) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(31/*attype*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // attype ::= attype tycon 
            {
              Type RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident tc = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new ConType(t,tc) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(31/*attype*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // attype ::= LPAREN type COMMA types RPAREN tycon 
            {
              Type RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List ts = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident tc = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new ConType(prepend(t,ts),tc) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(31/*attype*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // attype ::= LBRACE RBRACE 
            {
              Type RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new RecordType() .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(31/*attype*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // attype ::= LBRACE typerecord RBRACE 
            {
              Type RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int trleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List tr = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new RecordType(tr) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(31/*attype*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // attype ::= tyvar 
            {
              Type RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tvleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident tv = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new VarType(tv) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(31/*attype*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // type ::= error 
            {
              Type RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new ErrorType() .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(30/*type*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // type ::= attype 
            {
              Type RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = t; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(30/*type*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // type ::= type ARROW type 
            {
              Type RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int t1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new FnType(t1,t2) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(30/*type*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // type ::= typetuple 
            {
              Type RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int ttleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List tt = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new TupleType(tt) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(30/*type*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // pat ::= error 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new ErrorPat() .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(25/*pat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // pat ::= pat COLON type 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Pat p = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new TypedPat(p,t) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(25/*pat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // pat ::= pat AS pat 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int p1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Pat p1 = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Pat p2 = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new LayeredPat(p1,p2) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(25/*pat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // pat ::= atpats 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new FlatConPat(ps) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(25/*pat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // atpats ::= atpats atpat 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Pat p = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(ps,p); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(60/*atpats*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // atpats ::= atpat 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Pat p = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(p); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(60/*atpats*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // pats ::= pats COMMA pat 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Pat p = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(ps,p); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(59/*pats*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // pats ::= pat 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Pat p = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(p); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(59/*pats*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // orpat ::= orpat BAR pat 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int opleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List op = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Pat p = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(op,p); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(61/*orpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // orpat ::= pat BAR pat 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int p1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Pat p1 = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Pat p2 = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(list(p1),p2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(61/*orpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // patfield ::= ident constraint AS pat 
            {
              Field RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Pat p = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new VarPatField(id,c,p) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(28/*patfield*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // patfield ::= ident constraint 
            {
              Field RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new VarPatField(id,c) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(28/*patfield*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // patfield ::= label EQUALS pat 
            {
              Field RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Pat p = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new PatField(l,p) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(28/*patfield*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // patrecord ::= DOTDOTDOT 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = list(); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(58/*patrecord*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // patrecord ::= patfield COMMA patrecord 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List r = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = prepend(f,r); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(58/*patrecord*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // patrecord ::= patfield 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(f); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(58/*patrecord*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // atpat ::= LPAREN pat RPAREN 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		Pat p = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = p .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // atpat ::= LPAREN orpat RPAREN 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int opleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List op = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new OrPat(op) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // atpat ::= LPAREN pat COMMA pats RPAREN 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		Pat p = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new TuplePat(prepend(p,ps)) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // atpat ::= LPAREN RPAREN 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new UnitPat() .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // atpat ::= LBRACE patrecord RBRACE 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List r = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new RecordPat(r) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // atpat ::= LBRACE RBRACE 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new RecordPat() .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // atpat ::= LVECTOR pats RBRACKET 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new ListPat(ps) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // atpat ::= LVECTOR RBRACKET 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new VectorPat() .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // atpat ::= LBRACKET pats RBRACKET 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new ListPat(ps) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // atpat ::= LBRACKET RBRACKET 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new ListPat() .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // atpat ::= UNDER 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new WildPat() .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // atpat ::= CHAR 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new CharPat(c) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // atpat ::= STRING 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new StringPat(s) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // atpat ::= INT 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int ileft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new IntPat(i) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // atpat ::= longident2 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new VarPat(id) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // atpat ::= OP ident2 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new VarPat(id, true) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // atpat ::= ident1 
            {
              Pat RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new VarPat(id) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(26/*atpat*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // fixity ::= NONFIX 
            {
              Fixity RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new Fixity(Fixity.NONE) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(32/*fixity*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // fixity ::= INFIXR INT 
            {
              Fixity RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int ileft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new Fixity(Fixity.RIGHT, i) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(32/*fixity*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // fixity ::= INFIXR 
            {
              Fixity RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new Fixity(Fixity.RIGHT) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(32/*fixity*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // fixity ::= INFIX INT 
            {
              Fixity RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int ileft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new Fixity(Fixity.LEFT, i) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(32/*fixity*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // fixity ::= INFIX 
            {
              Fixity RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new Fixity(Fixity.LEFT) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(32/*fixity*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // exnbind ::= exnbind AND exnbind 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int eb1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int eb1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List eb1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int eb2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eb2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List eb2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(eb1,eb2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(23/*exnbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exnbind ::= op_ ident2 EQUALS qident2 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int id1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Ident id1 = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id2 = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new ExnBind(id1,id2) .mark(left,right));
				id1.mark(id1left,id1right); id2.mark(id2left,id2right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(23/*exnbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exnbind ::= op_ ident2 OF type 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new ExnBind(id,t) .mark(left,right)); 
				id.mark(idleft, idright); t.mark(tleft,tright); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(23/*exnbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // exnbind ::= op_ ident2 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new ExnBind(id) .mark(left,right));
				id.mark(idleft,idright); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(23/*exnbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // conbind ::= conbind BAR conbind 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int cb1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int cb1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List cb1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int cb2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int cb2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List cb2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(cb1,cb2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(22/*conbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // conbind ::= op_ ident2 OF type 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new ConBind(id,t) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(22/*conbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // conbind ::= op_ ident2 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new ConBind(id) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(22/*conbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // datatypebind ::= datatypebind AND datatypebind 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int db1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int db1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List db1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int db2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int db2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List db2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(db1,db2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(21/*datatypebind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // datatypebind ::= LAZY tyvars ident EQUALS DATATYPE tycon 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tvsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
		int tvsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).right;
		List tvs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident tc = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new DatatypeBind(tvs,id,tc,true) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(21/*datatypebind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // datatypebind ::= tyvars ident EQUALS DATATYPE tycon 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tvsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
		int tvsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).right;
		List tvs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident tc = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new DatatypeBind(tvs,id,tc) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(21/*datatypebind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // datatypebind ::= LAZY tyvars ident EQUALS conbind 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tvsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int tvsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		List tvs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int cbsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int cbsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List cbs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new DatatypeBind(tvs,id,cbs,true) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(21/*datatypebind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // datatypebind ::= tyvars ident EQUALS conbind 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tvsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int tvsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		List tvs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int cbsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int cbsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List cbs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new DatatypeBind(tvs,id,cbs) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(21/*datatypebind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // typebind ::= typebind AND typebind 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tb1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int tb1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List tb1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tb2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tb2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List tb2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(tb1,tb2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(20/*typebind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // typebind ::= tyvars ident EQUALS type 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tvsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int tvsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		List tvs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new TypeBind(tvs,id,t) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(20/*typebind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // clauses ::= clauses BAR clauses 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int c1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List c1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List c2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(c1,c2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(24/*clauses*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // clauses ::= atpats constraint EQUALS exp 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new Clause(ps,c,e) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(24/*clauses*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // funbind ::= funbind AND funbind 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int fb1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int fb1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List fb1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int fb2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int fb2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List fb2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(fb1,fb2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(19/*funbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // funbind ::= LAZY clauses 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int csleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List cs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new FunBind(cs,true) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(19/*funbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // funbind ::= clauses 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int csleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List cs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new FunBind(cs) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(19/*funbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // recvalbind ::= recvalbind AND recvalbind 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int vb1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int vb1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List vb1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int vb2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int vb2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List vb2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(vb1,vb2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(18/*recvalbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // recvalbind ::= LAZY op_ ident1 constraint EQUALS exp 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new RecValBind(id,c,e,true) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(18/*recvalbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // recvalbind ::= op_ ident1 constraint EQUALS exp 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new RecValBind(id,c,e) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(18/*recvalbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valbind ::= valbind AND valbind 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int vb1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int vb1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List vb1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int vb2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int vb2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List vb2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(vb1,vb2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(17/*valbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valbind ::= LAZY pat EQUALS exp 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Pat p = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new ValBind(p,e,true) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(17/*valbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valbind ::= pat EQUALS exp 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Pat p = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new ValBind(p,e) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(17/*valbind*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dec ::= fixity idents2 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		Fixity f = (Fixity)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List ids = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new FixityDec(f,ids) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(15/*dec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // dec ::= OPEN qidents1 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List ids = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new OpenDec(ids) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(15/*dec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // dec ::= EXCEPTION exnbind 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int ebleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List eb = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new ExnDec(eb) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(15/*dec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // dec ::= ABSTYPE datatypebind WITHTYPE typebind WITH decs END 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-6)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).right;
		List db = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).value;
		int tbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		List tb = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List ds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new AbstypeDec(db,tb,ds) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(15/*dec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // dec ::= ABSTYPE datatypebind WITH decs END 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		List db = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List ds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new AbstypeDec(db,ds) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(15/*dec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // dec ::= DATATYPE datatypebind WITHTYPE typebind 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List db = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List tb = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new DatatypeDec(db,tb) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(15/*dec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // dec ::= DATATYPE datatypebind 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int dbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List db = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new DatatypeDec(db) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(15/*dec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // dec ::= TYPE typebind 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List tb = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new TypeDec(tb) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(15/*dec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // dec ::= FUN funbind 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int fbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List fb = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new FunDec(fb) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(15/*dec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // dec ::= VAL REC tyvarseq recvalbind 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tvsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int tvsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List tvs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int rvbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int rvbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List rvb = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new RecValDec(rvb,tvs) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(15/*dec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // dec ::= VAL REC recvalbind 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int rvbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int rvbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List rvb = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new RecValDec(rvb) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(15/*dec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // dec ::= VAL tyvarseq valbind 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tvsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int tvsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List tvs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List vb = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new ValDec(vb,tvs) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(15/*dec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // dec ::= VAL valbind 
            {
              Dec RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int vbleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List vb = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new ValDec(vb) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(15/*dec*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // decs ::= decs SEMIC 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int dsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List ds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = ds; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(57/*decs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // decs ::= decs error 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int dsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List ds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(ds, new ErrorDec() .mark(eleft,eright)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(57/*decs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // decs ::= decs dec 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int dsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List ds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(ds,d); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(57/*decs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // decs ::= LOCAL decs IN decs END 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int ds1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int ds1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		List ds1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int ds2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int ds2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List ds2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = list(new LocalDec(ds1,ds2) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(57/*decs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // decs ::= 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = list(); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(57/*decs*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // rules ::= rules BAR rules 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int r1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List r1 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List r2 = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = concat(r1,r2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(56/*rules*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // rules ::= pat DARROW exp 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Pat p = (Pat)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(new Rule(p,e) .mark(left,right)); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(56/*rules*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // match ::= rules 
            {
              Match RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int rsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List rs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new Match(rs) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(14/*match*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp ::= error 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new ErrorExp() .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(11/*exp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= RAISE exp 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new RaiseExp(e) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(11/*exp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= IF exp THEN exp ELSE exp 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new IfExp(e1,e2,e3) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(11/*exp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= WHILE exp DO exp 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new WhileExp(e1,e2) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(11/*exp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= CASE exp OF match 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Match m = (Match)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new CaseExp(e,m) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(11/*exp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= FN match 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int mleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Match m = (Match)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new FnExp(m) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(11/*exp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= appexp 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List ae = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new FlatAppExp(ae) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(11/*exp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= exp COLON type 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new TypedExp(e,t) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(11/*exp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= exp ANDALSO exp 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new AndalsoExp(e1,e2) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(11/*exp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= exp ORELSE exp 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new OrelseExp(e1,e2) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(11/*exp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= exp HANDLE match 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Match m = (Match)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new HandleExp(e, m) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(11/*exp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // appexp ::= appexp atexp 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List ae = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(ae,e); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(55/*appexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // appexp ::= atexp 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(e); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(55/*appexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exps ::= exps COMMA exp 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int esleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(es,e); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(54/*exps*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exps ::= exp 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(e); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(54/*exps*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expseq ::= expseq SEMIC exp 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(s,e); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(53/*expseq*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expseq ::= exp SEMIC exp 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(list(e1),e2); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(53/*expseq*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expfield ::= label EQUALS exp 
            {
              Field RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new ExpField(l,e) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(27/*expfield*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exprecord ::= exprecord COMMA expfield 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List r = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(r,f); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(52/*exprecord*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exprecord ::= expfield 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(f); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(52/*exprecord*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // label ::= INT 
            {
              Label RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int ileft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new IntLabel(i) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(13/*label*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // label ::= ident1 
            {
              Label RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new IdentLabel(id) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(13/*label*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // atexp ::= LET decs IN expseq END 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int dsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		List ds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new LetExp(ds, new SeqExp(es).mark(esleft,esright)) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // atexp ::= LET decs IN exp END 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int dsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		List ds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new LetExp(ds,e) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // atexp ::= LVECTOR RBRACKET 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new VectorExp() .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atexp ::= LVECTOR exps RBRACKET 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int esleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new VectorExp(es) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // atexp ::= LBRACKET RBRACKET 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new ListExp() .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // atexp ::= LBRACKET exps RBRACKET 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int esleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new ListExp(es) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // atexp ::= LPAREN exp COMMA exps RPAREN 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new TupleExp(prepend(e,es)) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // atexp ::= LPAREN expseq RPAREN 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int esleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new SeqExp(es) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // atexp ::= LPAREN exp RPAREN 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = e .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // atexp ::= LPAREN RPAREN 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new UnitExp() .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // atexp ::= LBRACE RBRACE 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = new RecordExp() .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // atexp ::= LBRACE exprecord RBRACE 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int erleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List er = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = new RecordExp(er) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // atexp ::= HASH label 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new SelectorExp(l) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // atexp ::= CHAR 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new CharExp(c) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // atexp ::= STRING 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new StringExp(s) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // atexp ::= REAL 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int rleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new RealExp(r) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // atexp ::= INT 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int ileft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new IntExp(i) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // atexp ::= longident2 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new VarExp(id) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // atexp ::= OP ident2 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new VarExp(id, true) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // atexp ::= ident2 
            {
              Exp RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new VarExp(id) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(12/*atexp*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op_ ::= OP 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;

              CUP$SmlParser$result = new java_cup.runtime.Symbol(43/*op_*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // op_ ::= 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;

              CUP$SmlParser$result = new java_cup.runtime.Symbol(43/*op_*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // constraint ::= COLON type 
            {
              Type RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = t; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(44/*constraint*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // constraint ::= 
            {
              Type RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = null; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(44/*constraint*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tyvarseq ::= tyvarseq COMMA tyvar 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tvsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int tvsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List tvs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident tv = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(tvs,tv); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(50/*tyvarseq*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tyvarseq ::= tyvar 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tvleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident tv = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(tv); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(50/*tyvarseq*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tyvars ::= LPAREN tyvarseq RPAREN 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tvsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int tvsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List tvs = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = tvs; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(49/*tyvars*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tyvars ::= tyvar 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tvleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident tv = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(tv); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(49/*tyvars*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tyvars ::= 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = list(); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(49/*tyvars*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // idents2 ::= idents2 ident2 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List ids = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(ids,id); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(48/*idents2*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // idents2 ::= ident2 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(id); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(48/*idents2*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // qidents1 ::= qidents1 qident1 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List ids = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = append(ids,id); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(47/*qidents1*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // qidents1 ::= qident1 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = list(id); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(47/*qidents1*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // longident2 ::= ID DOT qualifier id2 
            {
              Ident RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int id1left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List q = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new Ident(append(q,id1),id2) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(10/*longident2*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // qident2 ::= qualifier id2 
            {
              Ident RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int qleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List q = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new Ident(q,id) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(9/*qident2*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // qident1 ::= qualifier id1 
            {
              Ident RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int qleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List q = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new Ident(q,id) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(8/*qident1*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // qident ::= qualifier ID 
            {
              Ident RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int qleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		List q = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new Ident(q,id) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(7/*qident*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // qualifier ::= qualifier ID DOT 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int qleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).right;
		List q = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		 RESULT = prepend(id,q); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(51/*qualifier*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // qualifier ::= 
            {
              List RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = list(); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(51/*qualifier*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tyvar ::= TYVAR 
            {
              Ident RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int tvleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		String tv = (String)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new Ident(tv) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(5/*tyvar*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ident2 ::= id2 
            {
              Ident RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new Ident(id) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(4/*ident2*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ident1 ::= id1 
            {
              Ident RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new Ident(id) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(3/*ident1*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ident ::= ID 
            {
              Ident RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new Ident(id) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(2/*ident*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // id2 ::= EQUALS 
            {
              String RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = "="; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(46/*id2*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // id2 ::= ASTERISK 
            {
              String RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = "*"; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(46/*id2*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // id2 ::= ID 
            {
              String RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = id; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(46/*id2*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // id1 ::= ASTERISK 
            {
              String RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		 RESULT = "*"; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(45/*id1*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // id1 ::= ID 
            {
              String RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = id; 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(45/*id1*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sml EOF 
            {
              Object RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).right;
		ASTRoot start_val = (ASTRoot)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).value;
		RESULT = start_val;
              CUP$SmlParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$SmlParser$parser.done_parsing();
          return CUP$SmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sml ::= topdecs 
            {
              ASTRoot RESULT = null;
              int left = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
              int right = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		int dsleft = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right;
		List ds = (List)((java_cup.runtime.Symbol) CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).value;
		 RESULT = new ASTRoot(ds) .mark(left,right); 
              CUP$SmlParser$result = new java_cup.runtime.Symbol(1/*sml*/, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SmlParser$stack.elementAt(CUP$SmlParser$top-0)).right, RESULT);
            }
          return CUP$SmlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


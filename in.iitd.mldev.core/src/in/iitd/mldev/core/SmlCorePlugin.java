package in.iitd.mldev.core;

import in.iitd.mldev.core.scan.SmlPartitionScanner;

import java.util.MissingResourceException;
import java.util.ResourceBundle;

import org.eclipse.core.runtime.Plugin;
import org.eclipse.jface.text.IDocument;
import org.eclipse.jface.text.IDocumentExtension3;
import org.eclipse.jface.text.IDocumentPartitioner;
import org.eclipse.jface.text.rules.FastPartitioner;
import org.osgi.framework.BundleContext;


/** The main plugin class. Generated by Eclipse and not modified much.
 * Contains "global" string constants used as identifiers by many classes. */
public class SmlCorePlugin extends Plugin {
	//The shared instance.
	private static SmlCorePlugin plugin;
	//Resource bundle.
	private ResourceBundle resourceBundle;

	/** Identifier used to access SML-specific document partitioning
	 * (SML comments and strings) computed by a SmlPartitionScanner. */
	public static final String SML_PARTITIONING = "in.iitd.mldev.smlPartitioning";
	
	/**
	 * The constructor.
	 */
	public SmlCorePlugin() {
		super();
		plugin = this;
		try {
			resourceBundle = ResourceBundle.getBundle("in.iitd.mldev.core.SmlCorePluginResources");
		} catch (MissingResourceException x) {
			resourceBundle = null;
		}
	}

	/**
	 * This method is called upon plug-in activation
	 */
	public void start(BundleContext context) throws Exception {
		super.start(context);
	}

	/**
	 * This method is called when the plug-in is stopped
	 */
	public void stop(BundleContext context) throws Exception {
		super.stop(context);
	}

	/**
	 * Returns the shared instance.
	 */
	public static SmlCorePlugin getDefault() {
		return plugin;
	}

	/**
	 * Returns the partitioner for the given document. A DefaultPartitioner
	 * using an SmlPartitionScanner will be created and connected to
	 * the document if one is not already registered.
	 */
	/* TODO: This method should go into the SmlDocumentSetupParticipant,
	 * once the lexer is rewritten to not use document partitioning. */
	public static IDocumentPartitioner getPartitioner (IDocument document) {
		IDocumentExtension3 documentExt = (IDocumentExtension3)document;
		IDocumentPartitioner partitioner = documentExt.getDocumentPartitioner(SML_PARTITIONING);
		if (partitioner == null) {
	    	partitioner = new FastPartitioner(new SmlPartitionScanner(), SmlPartitionScanner.CONTENT_TYPES);
	    	partitioner.connect(document);
	    	documentExt.setDocumentPartitioner(SmlCorePlugin.SML_PARTITIONING, partitioner);
		}
		return partitioner;
	}

	/**
	 * Returns the string from the plugin's resource bundle,
	 * or 'key' if not found.
	 */
	public static String getResourceString(String key) {
		ResourceBundle bundle = SmlCorePlugin.getDefault().getResourceBundle();
		try {
			return (bundle != null) ? bundle.getString(key) : key;
		} catch (MissingResourceException e) {
			return key;
		}
	}

	/**
	 * Returns the plugin's resource bundle,
	 */
	public ResourceBundle getResourceBundle() {
		return resourceBundle;
	}

}
